[{"/Users/vikas/Documents/rzt-nbp/src/index.js":"1","/Users/vikas/Documents/rzt-nbp/src/store.js":"2","/Users/vikas/Documents/rzt-nbp/src/routes.js":"3","/Users/vikas/Documents/rzt-nbp/src/history.js":"4","/Users/vikas/Documents/rzt-nbp/src/actions/actions.js":"5","/Users/vikas/Documents/rzt-nbp/src/containers/App/App.js":"6","/Users/vikas/Documents/rzt-nbp/src/reducers/rootReducer.js":"7","/Users/vikas/Documents/rzt-nbp/src/sagas/sagas.js":"8","/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.actions.js":"9","/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.actions.js":"10","/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.actions.js":"11","/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.constants.js":"12","/Users/vikas/Documents/rzt-nbp/src/pages/Global/Global.actions.js":"13","/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.actions.js":"14","/Users/vikas/Documents/rzt-nbp/src/pages/Global/Global.js":"15","/Users/vikas/Documents/rzt-nbp/src/utils/index.js":"16","/Users/vikas/Documents/rzt-nbp/src/reducers/reducers.js":"17","/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.constants.js":"18","/Users/vikas/Documents/rzt-nbp/src/pages/Global/Global.constants.js":"19","/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.constants.js":"20","/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.constants.js":"21","/Users/vikas/Documents/rzt-nbp/src/components/Button/Button.js":"22","/Users/vikas/Documents/rzt-nbp/src/utils/reducerUtils.js":"23","/Users/vikas/Documents/rzt-nbp/src/utils/hooks.js":"24","/Users/vikas/Documents/rzt-nbp/src/utils/formatter.js":"25","/Users/vikas/Documents/rzt-nbp/src/utils/request.js":"26","/Users/vikas/Documents/rzt-nbp/src/utils/sagaUtils.js":"27","/Users/vikas/Documents/rzt-nbp/src/reducers/index.js":"28","/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.reducers.js":"29","/Users/vikas/Documents/rzt-nbp/src/pages/Global/Global.reducers.js":"30","/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.js":"31","/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.sagas.js":"32","/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.reducers.js":"33","/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.js":"34","/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.sagas.js":"35","/Users/vikas/Documents/rzt-nbp/src/components/PageHeader/index.js":"36","/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.js":"37","/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.sagas.js":"38","/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.sagas.js":"39","/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.reducers.js":"40","/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.js":"41","/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.reducers.js":"42","/Users/vikas/Documents/rzt-nbp/src/components/SecondaryList/SecondaryList.js":"43","/Users/vikas/Documents/rzt-nbp/src/components/SalesPitchList/SalesPitchList.js":"44","/Users/vikas/Documents/rzt-nbp/src/containers/ListContainer/ListContainer.js":"45","/Users/vikas/Documents/rzt-nbp/src/components/ScoreList/ScoreList.js":"46","/Users/vikas/Documents/rzt-nbp/src/components/TransactionDetails/TransactionDetails.js":"47","/Users/vikas/Documents/rzt-nbp/src/containers/TransactionChart/TransactionChart.js":"48","/Users/vikas/Documents/rzt-nbp/src/components/TransactionTable/TransactionTable.js":"49","/Users/vikas/Documents/rzt-nbp/src/components/EventTable/EventTable.js":"50","/Users/vikas/Documents/rzt-nbp/src/components/LineGraph/LineGraph.js":"51","/Users/vikas/Documents/rzt-nbp/src/components/ChartFilters/ChartFilters.js":"52","/Users/vikas/Documents/rzt-nbp/src/components/Table/Table.js":"53","/Users/vikas/Documents/rzt-nbp/src/components/PageHeader/DatasetsHeader.js":"54","/Users/vikas/Documents/rzt-nbp/src/components/PageHeader/CustomersHeader.js":"55","/Users/vikas/Documents/rzt-nbp/src/components/CustomerList/CustomerList.js":"56","/Users/vikas/Documents/rzt-nbp/src/components/CustomerList/Pagination.js":"57","/Users/vikas/Documents/rzt-nbp/src/components/DownloadCustomers/DownloadCustomers.js":"58","/Users/vikas/Documents/rzt-nbp/src/components/DownloadFile/DownloadFile.js":"59","/Users/vikas/Documents/rzt-nbp/src/components/DropDown/DropDown.js":"60","/Users/vikas/Documents/rzt-nbp/src/components/Pagination/Pagination.js":"61","/Users/vikas/Documents/rzt-nbp/src/containers/CustomerList/CustomerList.js":"62","/Users/vikas/Documents/rzt-nbp/src/containers/AnalyseSegments/AnalyseSegments.js":"63","/Users/vikas/Documents/rzt-nbp/src/containers/DatasetList/DatasetList.js":"64","/Users/vikas/Documents/rzt-nbp/src/components/Dataset/Dataset.js":"65","/Users/vikas/Documents/rzt-nbp/src/components/Dataset/DatasetHead.js":"66","/Users/vikas/Documents/rzt-nbp/src/containers/TransactionListDetails/TransactionListDetails.js":"67","/Users/vikas/Documents/rzt-nbp/src/components/ProgressBar/ProgressBar.js":"68","/Users/vikas/Documents/rzt-nbp/src/containers/DatasetList/SegmentedBody.js":"69","/Users/vikas/Documents/rzt-nbp/src/containers/DatasetChart/DatasetChart.js":"70","/Users/vikas/Documents/rzt-nbp/src/containers/DatasetBarGraph/DatasetBarGraph.js":"71","/Users/vikas/Documents/rzt-nbp/src/containers/AnalyseBarGraph/AnalyseBarGraph.js":"72","/Users/vikas/Documents/rzt-nbp/src/components/Tooltip/Tooltip.js":"73","/Users/vikas/Documents/rzt-nbp/src/components/BarGraph/BarGraph.js":"74"},{"size":760,"mtime":1608031896158,"results":"75","hashOfConfig":"76"},{"size":1561,"mtime":1608031896164,"results":"77","hashOfConfig":"76"},{"size":8745,"mtime":1608040505384,"results":"78","hashOfConfig":"76"},{"size":110,"mtime":1608031896158,"results":"79","hashOfConfig":"76"},{"size":243,"mtime":1608031896141,"results":"80","hashOfConfig":"76"},{"size":1857,"mtime":1608031896153,"results":"81","hashOfConfig":"76"},{"size":114,"mtime":1608031896164,"results":"82","hashOfConfig":"76"},{"size":596,"mtime":1608031896164,"results":"83","hashOfConfig":"76"},{"size":1991,"mtime":1608031896161,"results":"84","hashOfConfig":"76"},{"size":1116,"mtime":1608031896162,"results":"85","hashOfConfig":"76"},{"size":876,"mtime":1608031896159,"results":"86","hashOfConfig":"76"},{"size":1564,"mtime":1608031896161,"results":"87","hashOfConfig":"76"},{"size":1049,"mtime":1608031896163,"results":"88","hashOfConfig":"76"},{"size":944,"mtime":1608031896160,"results":"89","hashOfConfig":"76"},{"size":2962,"mtime":1608031896163,"results":"90","hashOfConfig":"76"},{"size":1676,"mtime":1608039095570,"results":"91","hashOfConfig":"76"},{"size":768,"mtime":1608031896164,"results":"92","hashOfConfig":"76"},{"size":708,"mtime":1608031896159,"results":"93","hashOfConfig":"76"},{"size":543,"mtime":1608031896163,"results":"94","hashOfConfig":"76"},{"size":752,"mtime":1608031896162,"results":"95","hashOfConfig":"76"},{"size":787,"mtime":1608039784436,"results":"96","hashOfConfig":"76"},{"size":502,"mtime":1608031896142,"results":"97","hashOfConfig":"76"},{"size":511,"mtime":1608031896165,"results":"98","hashOfConfig":"76"},{"size":680,"mtime":1608031896165,"results":"99","hashOfConfig":"76"},{"size":1480,"mtime":1608031896164,"results":"100","hashOfConfig":"76"},{"size":3350,"mtime":1608039095578,"results":"101","hashOfConfig":"76"},{"size":362,"mtime":1608031896165,"results":"102","hashOfConfig":"76"},{"size":860,"mtime":1608031896163,"results":"103","hashOfConfig":"76"},{"size":3238,"mtime":1608031896161,"results":"104","hashOfConfig":"76"},{"size":2543,"mtime":1608031896163,"results":"105","hashOfConfig":"76"},{"size":6926,"mtime":1608039421370,"results":"106","hashOfConfig":"76"},{"size":2211,"mtime":1608034089751,"results":"107","hashOfConfig":"76"},{"size":504,"mtime":1608031896160,"results":"108","hashOfConfig":"76"},{"size":1934,"mtime":1608034901805,"results":"109","hashOfConfig":"76"},{"size":3176,"mtime":1608031896162,"results":"110","hashOfConfig":"76"},{"size":197,"mtime":1608034579473,"results":"111","hashOfConfig":"76"},{"size":7561,"mtime":1608039974047,"results":"112","hashOfConfig":"76"},{"size":1003,"mtime":1608031896162,"results":"113","hashOfConfig":"76"},{"size":2018,"mtime":1608031896161,"results":"114","hashOfConfig":"76"},{"size":811,"mtime":1608031896161,"results":"115","hashOfConfig":"76"},{"size":6328,"mtime":1608039951656,"results":"116","hashOfConfig":"76"},{"size":1234,"mtime":1608031896162,"results":"117","hashOfConfig":"76"},{"size":1058,"mtime":1608034901830,"results":"118","hashOfConfig":"76"},{"size":851,"mtime":1608039630705,"results":"119","hashOfConfig":"76"},{"size":2607,"mtime":1608039672295,"results":"120","hashOfConfig":"76"},{"size":1015,"mtime":1608031896151,"results":"121","hashOfConfig":"76"},{"size":4193,"mtime":1608031896152,"results":"122","hashOfConfig":"76"},{"size":4299,"mtime":1608039372857,"results":"123","hashOfConfig":"76"},{"size":1834,"mtime":1608031896152,"results":"124","hashOfConfig":"76"},{"size":1477,"mtime":1608031896147,"results":"125","hashOfConfig":"76"},{"size":3447,"mtime":1608039910482,"results":"126","hashOfConfig":"76"},{"size":4265,"mtime":1608031896143,"results":"127","hashOfConfig":"76"},{"size":3411,"mtime":1608031896151,"results":"128","hashOfConfig":"76"},{"size":2936,"mtime":1608039095542,"results":"129","hashOfConfig":"76"},{"size":3450,"mtime":1608039438397,"results":"130","hashOfConfig":"76"},{"size":2213,"mtime":1608031896144,"results":"131","hashOfConfig":"76"},{"size":3248,"mtime":1608039095540,"results":"132","hashOfConfig":"76"},{"size":4801,"mtime":1608039330402,"results":"133","hashOfConfig":"76"},{"size":1429,"mtime":1608031896146,"results":"134","hashOfConfig":"76"},{"size":4276,"mtime":1608031896146,"results":"135","hashOfConfig":"76"},{"size":4579,"mtime":1608039762933,"results":"136","hashOfConfig":"76"},{"size":3836,"mtime":1608040013717,"results":"137","hashOfConfig":"76"},{"size":3480,"mtime":1608031896153,"results":"138","hashOfConfig":"76"},{"size":11850,"mtime":1608039990991,"results":"139","hashOfConfig":"76"},{"size":6570,"mtime":1608039018184,"results":"140","hashOfConfig":"76"},{"size":3524,"mtime":1608039502556,"results":"141","hashOfConfig":"76"},{"size":5811,"mtime":1608034901818,"results":"142","hashOfConfig":"76"},{"size":473,"mtime":1608031896150,"results":"143","hashOfConfig":"76"},{"size":3637,"mtime":1608031896155,"results":"144","hashOfConfig":"76"},{"size":3629,"mtime":1608031896154,"results":"145","hashOfConfig":"76"},{"size":2125,"mtime":1608031896154,"results":"146","hashOfConfig":"76"},{"size":1871,"mtime":1608031896153,"results":"147","hashOfConfig":"76"},{"size":479,"mtime":1608031896152,"results":"148","hashOfConfig":"76"},{"size":2873,"mtime":1608039862186,"results":"149","hashOfConfig":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},"1glc0uj",{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"153"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"153"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"153"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"153"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"153"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"153"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"216","usedDeprecatedRules":"153"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"219","usedDeprecatedRules":"220"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"153"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"153"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"153"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"153"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"153"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"153"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"153"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"153"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"153"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"153"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"153"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"153"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"153"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"153"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"153"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"153"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"153"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"153"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"153"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"153"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"153"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"298","usedDeprecatedRules":"153"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"153"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"153"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"153"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"153"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"153"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"153"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"153"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"153"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"153"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"153"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"153"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"153"},"/Users/vikas/Documents/rzt-nbp/src/index.js",["343"],"import React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { Router } from 'react-router';\nimport { loadToDoList } from './actions/actions';\nimport App from './containers/App/App';\nimport store from './store';\nimport createRoutes from './routes';\nimport './index.css';\nimport history from './history';\n\n//store.dispatch(loadToDoList());\n\nconst target = document.querySelector('#root');\n\nconst rootRoute = {\n  childRoutes: [{\n    path: '/',\n    component: App,\n    indexRoute: {onEnter: (nextState, replace)=> { replace(\"/datasets\"); }},\n    childRoutes: createRoutes(store)\n  } ]\n}\n\nrender(\n  <Provider store={store}>\n    <Router history={history} routes={rootRoute}>\n    </Router>\n  </Provider>,\n  target,\n);",["344","345"],"/Users/vikas/Documents/rzt-nbp/src/store.js",[],"/Users/vikas/Documents/rzt-nbp/src/routes.js",[],"/Users/vikas/Documents/rzt-nbp/src/history.js",[],"/Users/vikas/Documents/rzt-nbp/src/actions/actions.js",[],"/Users/vikas/Documents/rzt-nbp/src/containers/App/App.js",["346"],"import * as React from 'react';\nimport {Loader, NotificationBar, Popup} from '../../pages/Global/Global';\nimport TransitionGroup from 'react-addons-transition-group';\nimport {connect} from 'react-redux';\nimport {actionHideNotificationBar} from '../../pages/Global/Global.actions'\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.props.hideNotificationBar.bind(this);\n    }\n\n    render() {\n        let notification = '';\n        let {header, main, loader, errorPopup} = this.props;\n        if (this.props.notification.visible)\n            notification = <NotificationBar data={this.props.notification}\n                                            hideNotificationBar={this.props.hideNotificationBar}/>\n        return (\n            <TransitionGroup component=\"div\">\n                <div style={ loader > 0 ? { filter:'blur(2px)' } : {}}>\n                { header }\n                { main }\n                </div>\n                { ( loader != 0 ) && <Loader/> }\n                { notification }\n                { errorPopup.visible && <Popup msg={errorPopup.msg} onSave={errorPopup.onSave} onCancel={errorPopup.onCancel}>\n                  <span>You have unsaved changes. <br/> Do you wish to continue without saving ?</span>\n                </Popup> }\n\n            </TransitionGroup>\n        );\n\n    }\n}\n\n\nconst mapToProps = (state) => {\n    console.log(\"state :\",state)\n    /*TODO: divide the customers data so that they can be easily passed to the components*/\n    return ({\n        loader: state.global.loader.count,\n        notification: state.global.notification,\n        errorPopup: state.global.errorPopup\n    })\n}, dispatcher = (dispatch) => ({\n    hideNotificationBar: () => {\n        dispatch(actionHideNotificationBar({isClosed: true}))\n    }\n});\n\nexport default connect(mapToProps, dispatcher)(App);","/Users/vikas/Documents/rzt-nbp/src/reducers/rootReducer.js",[],"/Users/vikas/Documents/rzt-nbp/src/sagas/sagas.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.actions.js",["347"],"import { ACTION_LOAD_DATASETS,\n  ACTION_LOAD_DATASETS_SAGA,\n  ACTION_UPDATE_DATASET,\n  ACTION_UPDATE_DATASETS,\n  ACTION_UPDATE_DATASET_PROGRESS,\n  ACTION_UPDATE_DATASET_PROGRESS_SAGA,\n  ACTION_CHANGE_DATASET_ACTION_SAGA,\n  ACTION_REFRESH_DATASETS_SAGA,\n  ACTION_DELETE_DATASET_SAGA,\n  ACTION_DELETE_DATASET,\n  ACTION_LEAVE_DATASETS_PAGE,\n  ACTION_DATASET_LISTENER_SAGA,\n  ACTION_UNSUBSCRIBE_DATASET_LISTENER_SAGA } from './Datasets.constants';\n\nexport const actionSagaDatasetListener = ( data ) => ({\n    type: ACTION_DATASET_LISTENER_SAGA,\n    payload: data\n});\n\nexport const  actionSagaUnsubscribeDatasetListener = ( data ) => ({\n  type: ACTION_UNSUBSCRIBE_DATASET_LISTENER_SAGA,\n  payload: data\n})\n\nexport const actionSagaLoadDatasets = (data)=>({\n  type: ACTION_LOAD_DATASETS_SAGA,\n  payload: data\n});\n\nexport const actionSetDatasets = (data)=>({\n  type: ACTION_LOAD_DATASETS,\n  payload: data\n});\n\nexport const actionSagaDatasetProgress = (data)=>({\n  type: ACTION_UPDATE_DATASET_PROGRESS_SAGA,\n  payload: data\n});\n\nexport const actionUpdateDatasetProgress = (data)=>({\n  type: ACTION_UPDATE_DATASET_PROGRESS,\n  payload: data\n});\n\nexport const actionUpdateDatasets = (data)=>({\n  type: ACTION_UPDATE_DATASETS,\n  payload: data\n});\n\nexport const actionUpdateDataset = (data)=>({\n  type: ACTION_UPDATE_DATASET,\n  payload: data\n});\n\nexport const actionSagaRefreshDatasets = (data)=>({\n  type: ACTION_REFRESH_DATASETS_SAGA,\n  payload: data\n});\n\nexport const actionChangeDatasetAction = (data)=>({\n  type: ACTION_CHANGE_DATASET_ACTION_SAGA,\n  payload: data\n});\n\nexport const actionDeleteDatasets = (data) => ({\n  type: ACTION_DELETE_DATASET,\n  payload: data\n});\n\nexport const actionDeleteDatasetsSaga = (payload)=>({\n    type: ACTION_CHANGE_DATASET_ACTION_SAGA,\n    payload\n})\n\nexport const actionUpdateDatasetsProgressSaga =(payload) => ({\n    type: ACTION_UPDATE_DATASET_PROGRESS_SAGA,\n    payload\n})\n\nexport const actionLeaveDatasetsPage = () => ({\n    type: ACTION_LEAVE_DATASETS_PAGE\n});\n","/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.actions.js",["348","349","350","351","352"],"import {\n    LOAD_CUSTOMERS_PROFILE_DATA,\n    LOAD_CUSTOMERS_PROFILE_DATA_SAGA,\n    ACTION_LOAD_CUSTOMERS_SAGA,\n    ACTION_LEAVE_CUSTOMERS_PAGE,\n    ACTION_LOAD_CUSTOMERS,\n    ACTION_LOAD_CUSTOMER_SAGA,\n    ACTION_LOAD_CUSTOMER,\n    ACTION_HIDE_LOADER,\n    ACTION_LEAVE_FEEDBACK_PAGE\n} from './Feedback.constants';\n\n// export const loadCustomerProfileData = (data) => ({\n//     type: LOAD_CUSTOMERS_PROFILE_DATA,\n//     payload: data\n// });\n\n\nexport const loadCustomerProfileDataSaga = (data) => ({\n    type: LOAD_CUSTOMERS_PROFILE_DATA_SAGA,\n    payload: data\n});\n\n// export const actionSagaLoadCustomers = (data) => ({\n//     type: ACTION_LOAD_CUSTOMERS_SAGA,\n//     payload: data || '-1'\n// });\n\n// export const actionLoadCustomers = (data) => ({\n//     type: ACTION_LOAD_CUSTOMERS,\n//     payload: data\n// });\n\nexport const actionSagaLoadCustomer = (data) => ({\n    type: ACTION_LOAD_CUSTOMER_SAGA,\n    payload: data\n});\n\nexport const actionLoadCustomer = (data) => ({\n    type: ACTION_LOAD_CUSTOMER,\n    payload: data\n});\n\nexport const actionLeaveFeedbackPage = () => ({\n    type: ACTION_LEAVE_FEEDBACK_PAGE\n});","/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.actions.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.constants.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Global/Global.actions.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.actions.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Global/Global.js",["353"],"import * as React from \"react\";\nimport CSSModules from \"react-css-modules\";\nimport styles from './Global.css';\nimport Button from './../../components/Button/Button';\n\nclass loader extends React.Component {\n\n    render() {\n        console.log('In loader');\n        return (\n            <div styleName=\"wrapper\">\n                {/*<div styleName=\"loader__spinner\"/>*/}\n                {/*<h5 styleName=\"loader__title\">Loading...</h5>*/}\n                <ul styleName=\"loader\">\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                    <li></li>\n                </ul>\n            </div>\n        );\n    }\n};\n\nclass popup extends React.Component {\n    render(){\n        let { msg , children, onSave, onCancel } = this.props;\n        return (<div styleName=\"popup-overlay\">\n            <div styleName=\"popup warning\">\n                <div styleName=\"popup__head\">\n                    <span className=\"flaticon-caution-sign\" styleName=\"popup-warning-ico\"/>\n                    <span styleName=\"popup__head__text\">WARNING</span>\n                    <span styleName=\"close-ico\" className=\"flaticon-close\" onClick={onCancel}/>\n                </div>\n                <div styleName=\"popup__body\">\n                    <span styleName=\"popup__body__text\"> { msg || children } </span>\n                    <div styleName=\"popup__body-btn-wrapper\">\n                        <Button\n                          className={{ global: 'primary-btn' }}\n                          text=\"YES\" customStyle={styles['popup__body-btn']}\n                          onClick={onSave}/>\n                        <Button\n                          className={{ global: 'primary-btn' }}\n                          text=\"NO\" customStyle={styles['popup__body-btn']}\n                          onClick={onCancel}/>\n                    </div>\n                </div>\n            </div>\n        </div>)\n    }\n}\n\nclass notificationBar extends React.Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        let {data, hideNotificationBar} =  this.props;\n        return ( <div styleName={`notification-bar ${(data.type) || ''}`}>\n            <span styleName=\"notification-bar__msg\">{data.msg}</span>\n            { data.discardable && <button styleName=\"notification-bar__close-btn\"\n                                          onClick={() => {\n                                              console.log(\"closed\");\n                                              hideNotificationBar();\n                                          }}>\n                <span>+</span>\n            </button>}\n        </div>)\n    }\n}\n\n\nexport const Loader = CSSModules(loader, styles, {allowMultiple: true});\nexport const NotificationBar = CSSModules(notificationBar, styles, {allowMultiple: true});\nexport const Popup = CSSModules(popup, styles, {allowMultiple: true});","/Users/vikas/Documents/rzt-nbp/src/utils/index.js",["354","355"],"import _ from 'lodash';\nexport {createReducerFromObject} from './reducerUtils';\nexport {request} from './request';\nexport {getHooks} from './hooks';\nexport {dateformatter} from './formatter';\nexport {cancelSaga} from './sagaUtils';\nexport {formatINR, shortenINR, nFormatter} from './formatter';\nexport const clamp = (min, max) => val => Math.min(Math.max(min, val), max);\n\nexport function queryGenerator (obj) {\n    let query = _.map(obj, (value, key)=>{\n        if (value && key) return `${key}=${value}`\n    }).filter(i=>i);\n\n    if (query.length==0) return '';\n\n    return `?${query.join('&')}`\n}\n//\n// returns a list of all elements under the cursor\n//\nexport function elementsFromPointFallback(x,y) {\n    var elements = [], previousPointerEvents = [], current, i, d;\n\n    // get all elements via elementFromPoint, and remove them from hit-testing in order\n    while ((current = document.elementFromPoint(x,y)) && elements.indexOf(current)===-1 && current != null) {\n\n        // push the element and its current style\n        elements.push(current);\n        previousPointerEvents.push({\n            value: current.style.getPropertyValue('pointer-events'),\n            priority: current.style.getPropertyPriority('pointer-events')\n        });\n\n        // add \"pointer-events: none\", to get to the underlying element\n        current.style.setProperty('pointer-events', 'none', 'important');\n    }\n\n    // restore the previous pointer-events values\n    for(i = previousPointerEvents.length; d=previousPointerEvents[--i]; ) {\n        elements[i].style.setProperty('pointer-events', d.value?d.value:'', d.priority);\n    }\n\n    // return our results\n    return elements;\n}","/Users/vikas/Documents/rzt-nbp/src/reducers/reducers.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.constants.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Global/Global.constants.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.constants.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.constants.js",[],"/Users/vikas/Documents/rzt-nbp/src/components/Button/Button.js",[],"/Users/vikas/Documents/rzt-nbp/src/utils/reducerUtils.js",[],"/Users/vikas/Documents/rzt-nbp/src/utils/hooks.js",[],"/Users/vikas/Documents/rzt-nbp/src/utils/formatter.js",[],"/Users/vikas/Documents/rzt-nbp/src/utils/request.js",["356"],"import store from '../store';\nimport _ from 'lodash';\nimport { URL_STOMP } from './../pages/Global/Global.constants';\n\nimport SockJS from 'sockjs-client';\nimport Stomp from 'webstomp-client';\n\nimport {\n    actionShowNotificationBar,\n    actionHideNotificationBar,\n    actionLoaderIncrementCount,\n    actionLoaderDecrementCount,\n    actionLoaderResetCount\n} from '../pages/Global/Global.actions';\n\n/**\n * Returns a reducer function\n * @param reducerFunctions {object} an object where keys are action types and values are functions\n * @param initialState {*}\n * @returns {function(*=, {type: *, payload: *}): *}\n */\n\nconst notifyError = (e)=>{\n    store.dispatch(actionLoaderResetCount());\n    setTimeout(function () {\n        store.dispatch(actionHideNotificationBar());\n    }, 4000);\n    store.dispatch(actionShowNotificationBar({visible: true, msg: e.message || e.status || e, type: 'error'}));\n}\nexport const request = (method = \"GET\")=>function(command) {\n    console.info('In Request');\n    store.dispatch(actionLoaderIncrementCount());\n\n    return fetch(`/rest${command}`, { method })\n        .then(response=>{\n            if(response.ok) return response;\n            let errorStatus = response.statusText;\n\n            throw response.json().then(i=>{\n                return (i && i.message) || errorStatus || i;\n            });\n        })\n        .then(response=>response.json())\n        .then(response => {\n\n            console.info(\"response \", response)\n            store.dispatch(actionLoaderDecrementCount());\n            return response;\n\n        })\n        .catch(error=>{\n            if (error && error.then)\n                return error.then(function (e) {\n                    notifyError(e)\n                })\n            notifyError(error)\n            return;\n        })\n};\n\n\n\nvar ws, client, subscriptions = [], timeout;\n\nconst getClient = function(){\n    if (!client){\n        ws = new SockJS(URL_STOMP);\n        client = Stomp.over(ws);\n        client.connect({},\n            onConnect,\n            onConnectionError)\n    }\n    client.heartbeat.outgoing = 20000; // client will send heartbeats every 20000ms\n    client.heartbeat.incoming = 0;\n    return client;\n};\n\nconst onConnect = () => {\n\n    store.dispatch(actionShowNotificationBar({visible: true, msg: \"Connected\", discardable: true}));\n    setTimeout(function () {\n        store.dispatch(actionHideNotificationBar());\n    }, 2000);\n\n    subscribeAll();\n};\n\nconst onConnectionError = () => {\n    store.dispatch(actionLoaderResetCount());\n    if(!store.getState().global.notification.isClosed) {\n        store.dispatch(actionShowNotificationBar({visible: true, msg: \"Connection error, reconnecting...\", discardable: true}));\n    }\n    console.log('Reconnecting...');\n    timeout = setTimeout(() => {\n        client && client.disconnect();\n        client = null;\n        getClient()}, 2000);\n\n};\n\nconst subscribe = (url, cb) => { getClient().subscribe(url, cb) };\n\nconst subscribeAll = () => subscriptions.forEach(([url, cb])=>subscribe(url, cb));\n\nconst addSubscribe = (url, cb)=>{\n    subscriptions.push([url, cb]);\n    subscribe(url, cb);\n};\n\nexport const unsubscribe = (url) => {\n    client && client.disconnect();\n    client = null;\n    timeout && clearTimeout(timeout);\n    subscriptions.length = 0;\n};\n\nexport const listener = (url, cb) => addSubscribe(url, cb);\n","/Users/vikas/Documents/rzt-nbp/src/utils/sagaUtils.js",[],"/Users/vikas/Documents/rzt-nbp/src/reducers/index.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.reducers.js",["357","358","359","360","361"],"import {createReducerFromObject} from '../../utils';\nimport {\n    ACTION_LOAD_DATASETS,\n    ACTION_UPDATE_DATASET_PROGRESS,\n    ACTION_UPDATE_DATASETS,\n    ACTION_UPDATE_DATASET,\n    ACTION_DELETE_DATASET,\n    ACTION_LEAVE_DATASETS_PAGE,\n    ACTION_DATASET_LISTENER\n} from './Datasets.constants';\n\nexport const initialState = [];\n\nconst reducerFunctions = {\n    [\"action\"]: (state, payload) => state,\n    [ACTION_LOAD_DATASETS]: (state, payload) => {\n        if (!payload) return state;\n        return [\n            ...payload\n        ]\n    },\n    [ACTION_UPDATE_DATASET_PROGRESS]: (state, payload) => {\n        if (!payload) return state;\n        return state.map(dataset => {\n            if (dataset.dataset_id != payload.dataset_id)\n                return dataset;\n            else {\n                console.log(\"update\", payload)\n                return {\n                    ...dataset,\n                    status: {\n                        meta: {\n                            dataset_id: payload.dataset_id,\n                            message: payload.meta.message,\n                            progress: payload.meta.progress,\n                            duration: payload.meta.duration,\n                            completed_at: payload.meta.completed_at,\n                            eta: payload.meta.eta,\n                            msg_id: payload.meta.msg_id,\n                            segments: payload.meta.segments,\n                            gini_score: payload.meta.gini_score,\n                            error: payload.error,\n                        },\n                        state: payload.state\n                    }\n                }\n            }\n        });\n    },\n    [ACTION_UPDATE_DATASETS]: (state, payload) => {\n        if (!payload) return state;\n        let interesetedDataset = state.find((dataset) => payload.dataset_id === dataset.dataset_id)\n\n        if (interesetedDataset) {\n            return state.map(dataset => {\n                if (payload.dataset_id === dataset.dataset_id) return payload;\n                return dataset;\n            })\n        }\n\n        return [\n            {\n                ...payload\n            },\n            ...state\n        ]\n    },\n    [ACTION_UPDATE_DATASET]: (state, payload) => {\n        if (!payload) return state;\n        return state.map(dataset => {\n            if (dataset.dataset_id != payload.dataset_id)\n                return dataset;\n            else\n                return {\n                    ...dataset,\n                    status: {\n                        ...dataset.status,\n                        dataset_id: payload.dataset_id,\n                        meta: {\n                            ...dataset.status.meta,\n                            message: payload.message\n                        }\n                    },\n                    toggle: true\n                }\n        })\n    },\n    [ACTION_DELETE_DATASET]: (state, payload) => {\n        if (!payload) return state;\n        return state.filter(dataset => (dataset.dataset_id != payload.dataset_id));\n    },\n    [ ACTION_LEAVE_DATASETS_PAGE ]: () => initialState\n\n};\n\n\nconst datasetsPageReducer = createReducerFromObject(reducerFunctions, initialState);\n\nexport default datasetsPageReducer;","/Users/vikas/Documents/rzt-nbp/src/pages/Global/Global.reducers.js",["362"],"import {createReducerFromObject} from '../../utils';\nimport {\n    ACTION_LOADER_INCREMENT_COUNT,\n    ACTION_LOADER_DECREMENT_COUNT,\n    ACTION_SHOW_NOTIFICATION_BAR,\n    ACTION_HIDE_NOTIFICATION_BAR,\n    ACTION_TOGGLE_POPUP,\n    ACTION_LOADER_RESET_COUNT,\n    ACTION_DOWNLOAD_PROGRESS\n} from './Global.constants';\n\nexport const initialState = {\n    loader: {\n        count: 0\n    },\n    download: {\n        progress: 0,\n        visible: false\n    },\n    errorPopup: {\n        visible: false,\n        msg: \"\",\n        onSave: () => ( null ),\n        onCancel: () => ( null )\n    },\n    notification: {\n        visible: false,\n        msg: \"\",\n        discardable: true,\n        isClosed: false\n    }\n};\n\nconst reducerFunctions = {\n    [\"action\"]: (state, payload) => state,\n    [ACTION_LOADER_INCREMENT_COUNT]: (state, payload) => {\n      return {\n        ...state,\n        loader: {\n          count : state.loader.count + 1\n        }\n    }},\n    [ACTION_LOADER_DECREMENT_COUNT]: (state, payload) => {\n      return {\n        ...state,\n        loader: {\n        count : state.loader.count - 1 < 0 ? 0: state.loader.count - 1\n      }\n    }},\n    [ACTION_LOADER_RESET_COUNT]: (state)=>({\n        ...state,\n        loader: {\n            count : 0\n        }\n    }),\n    [ACTION_SHOW_NOTIFICATION_BAR]: (state, payload) => ({\n        ...state,\n        notification: {\n            visible: payload.visible || false,\n            msg: payload.msg || '',\n            discardable: payload.discardable || true,\n            isClosed: payload.isClosed || false,\n            type: payload.type || ''\n        },\n    }),\n    [ACTION_HIDE_NOTIFICATION_BAR]: (state, payload) => ({\n        ...state,\n        notification: {\n            visible: false,\n            msg: \"\",\n            isClosed: payload.isClosed || false\n        },\n    }),\n\n    [ ACTION_TOGGLE_POPUP ] : (state, payload) => {\n      if(state.errorPopup.visible)\n        return {\n          ...state,\n          errorPopup : !state.errorPopup.visible\n        }\n      else\n        return {\n          ...state,\n          errorPopup : {\n            visible : !state.errorPopup.visible,\n              msg : payload.msg,\n            onSave : payload.onSave,\n            onCancel : payload.onCancel\n          }\n        }\n    },\n    [ACTION_DOWNLOAD_PROGRESS]:(state, payload)=>{\n        if (!payload) return payload;\n        return {\n            ...state,\n            download: payload\n        }\n    }\n  };\n\n\nconst reducer = createReducerFromObject(reducerFunctions, initialState);\n\nexport default reducer;",["363","364"],"/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.js",["365","366","367","368","369"],"import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {push} from 'react-router-redux';\nimport CSSModules from 'react-css-modules';\nimport _ from 'underscore';\n\nimport styles from './Analyse.css';\nimport DropDown from './../../components/DropDown/DropDown';\nimport AnalyseSegment from './../../containers/AnalyseSegments/AnalyseSegments';\nimport Pagination from './../../components/Pagination/Pagination';\n\nimport classNames from 'classnames';\n\nimport { actionSagaLoadSegmentsList } from './Analyse.actions.js';\nimport { SEGMENTS_LEVELS } from './Analyse.constants.js';\n\nconst levels = SEGMENTS_LEVELS;\n\nconst dropdownOptions = [{ id: 1, name: 'AVG AGE' },\n    { id: 2, name: 'AFFLUENCE'} ,\n    { id: 3, name: 'PROFILE'},\n    // { id: 4, name: 'LIFECYCLE_PROPENSITY'},\n    { id: 5, name: 'EVENT'}];\n\nconst maps = {\n    'AVG AGE' : 'age',\n    'AFFLUENCE' : 'affluence',\n    'PROFILE' : 'segment_propensity',\n    // 'LIFECYCLE_PROPENSITY' : 'lifecycle_propensity',\n    // 'OVERALL PROPENSITY' : 'overall_propensity',\n    'EVENT' : 'event_propensity'\n};\n\nconst revmaps = _.reduce(maps, (acc, value, key)=>({\n        ...acc,\n        [value]: key\n    }), { })\n\n\nclass Analyse extends React.Component {\n\n    constructor(props, ags) {\n        super(props, ags);\n        this.state= {\n            showDownload: false\n        }\n    }\n\n    render() {\n        let { segments, gotoSegment } = this.props;\n        let { datasetId } = this.props.params;\n        let { segmentLevel, segmentId, segmentName, sortby, pageno } = this.props.location.query;\n        let selected =  revmaps[(sortby||'').replace('-','')];\n        let selectedOption = selected && dropdownOptions.find( item => item.name == selected ).id;\n        return (\n            <div styleName='wrapper'>\n                <div styleName=\"header\">\n                    <div className={\"clearfix\"}>\n                        <div styleName=\"header__title\" className=\"fleft\">\n                            <h3>SEGMENTS</h3>\n                            {segmentId && segmentName && <ul styleName=\"filter\">\n                                <li><span>{levels[segmentLevel - 1]}: <span styleName=\"highlight\">{segmentName}</span></span>\n                                    <span className=\"flaticon-close\" styleName=\"close-filter-ico\"\n                                        onClick={()=>gotoSegment(`/datasets/${datasetId}/analyse?segmentLevel=${segmentLevel || 0}`)}/>\n                                </li>\n                            </ul> }\n                        </div>\n\n                        <DropDown options={dropdownOptions}\n                                  placeholder = { \"SORT BY\" }\n                                  key={sortby}\n                                  displayValue={\"name\"}\n                                  uKey={\"id\"}\n                                  onClick={ ( { name } ) => {\n\n                                      let url = `/datasets/${datasetId}/segments?`;\n\n                                      url = `${url}segmentLevel=${(segmentLevel) || 0}`;\n                                      if (segmentId) url = `${url}&segmentId=${segmentId}`\n                                      if (segmentName) url = `${url}&segmentName=${segmentName}`\n                                      url = `${url}&sortby=${maps[name]}`\n                                      {/*url = `${url}&pageno=${pageno || 1}`*/}\n\n                                      gotoSegment(url);\n                                  } }\n                                  selectedOption ={ selectedOption }\n                                  wrapperClass={classNames(styles.depthDropdown)}\n                                  globalClass={'fright'}\n                                  sortable= { true }\n                                  toggleSort = { () =>{\n\n                                      let url = `/datasets/${datasetId}/segments?`;\n\n                                      url = `${url}segmentLevel=${segmentLevel || 0}`;\n                                      if (segmentId) url = `${url}&segmentId=${segmentId}`\n                                      if (segmentName) url = `${url}&segmentName=${segmentName}`\n\n                                      if (sortby) {\n                                            if (sortby.includes('-'))\n                                                url = `${url}&sortby=${sortby.replace('-','')}`\n                                            else\n                                                url = `${url}&sortby=-${sortby}`\n\n                                      };\n\n                                      gotoSegment(url);\n\n                                  }}\n                                  headStyle={\"fright\"}\n                        />\n                    </div>\n                </div>\n                <div styleName=\"analyse-wrapper\">\n                    <div styleName=\"analyse\">\n                        <AnalyseSegment\n                            datasetId = {datasetId}\n                            records={segments}\n                            locationQuery={this.props.location.query}\n                            gotoSegment={gotoSegment.bind(this)}\n                            isAnalyzePage={true}\n                            parent = { true }\n                        />\n                    </div>\n                </div>\n                {false && <div styleName=\"pagination\">\n                    {segments && <Pagination group_id={''}\n                                             totalCount={this.props.count}\n                                             pageNo={pageno||1}\n                                             pagesize={50}\n                                             loadPageData={({ pageno })=>{\n                                                 let url = '/segments?';\n\n                                                 url = `${url}segmentLevel=${Number(segmentLevel||0)}`;\n                                                 if (segmentId) url = `${url}&segmentId=${window.id}`\n                                                 if (segmentName) url = `${url}&segmentName=${window.name}`\n\n                                                 if (sortby) {\n                                                     url = `${url}&sortby=${sortby}`\n                                                 };\n                                                 {/*url = `${url}&pageno=${pageno||1}`*/}\n\n                                                 gotoSegment(url);\n                                             }\n                                             }\n                                             page={'analyse'}/>}\n                </div>}\n            </div>\n        );\n    }\n\n\n}\n\nconst mapToProps = (state)=> {\n    return ({\n        segments: state.analyse.segments\n    })\n}, dispatcher = (dispatch)=>({\n    gotoSegment: (path)=> {\n        dispatch(push(path))\n    }\n});\n\n\nexport default connect(mapToProps, dispatcher)(Analyse);\n","/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.sagas.js",["370"],"import {takeLatest, call, put, fork} from 'redux-saga/effects';\nimport {request, cancelSaga} from '../../utils';\nimport {\n    ACTION_LOAD_SEGMENTS_LIST_SAGA,\n    ACTION_LEAVE_ANALYSE_PAGE,\n    ACTION_DOWNLOAD_CUSTOMERS_SAGA,\n    url_analyse_segments\n} from './Analyse.constants';\nimport { actionDownloadProgress } from '../Global/Global.actions';\nimport { downloadCustomers } from '../../utils/request';\nimport {\n    actionLoadAnalyseSegment\n} from './Analyse.actions';\n\nvar showDialog = function (...e) {\n    console.error(\"error\", e);\n    return {type: 'none'}\n};\n\nfunction* loadAnalyseSegments({payload = {level: 0, dataset_id: 1 }}) {\n    try {\n        let {dataset_id, sortby} = payload;\n        let apiResponse = yield call(request(), url_analyse_segments(dataset_id, sortby), payload, data => data);\n\n        yield put(actionLoadAnalyseSegment(apiResponse));\n        return apiResponse;\n\n    } catch (error) {\n        yield put(showDialog({\n            title: \"Error\",\n            message: `Failed to delete model (${error})`,\n            type: \"DIALOG_TYPE_OK\"\n        }));\n    }\n}\n\n// function* getFilteredSegments(payload = {}) {\n//     try {\n//         let apiResponse = yield call(request, URL_FILTER_SEGMENTS, payload, data => data);\n//         yield put(actionLoadAnalyseSegment(apiResponse));\n//\n//     } catch (error) {\n//         yield put(showDialog({\n//             title: \"Error\",\n//             message: `Failed to delete model (${error})`,\n//             type: \"DIALOG_TYPE_OK\"\n//         }));\n//     }\n// }\n\nfunction* prepareToDownload({payload}) {\n    console.log(payload);\n    let {dataset_id} = payload;\n    downloadCustomers({ dataset_id });\n    yield put(actionDownloadProgress({\n        progress: 0,\n        visible: true\n    }));\n}\nfunction* customerSaga() {\n    let watcher = [];\n    watcher[0] = yield fork(takeLatest, ACTION_LOAD_SEGMENTS_LIST_SAGA, loadAnalyseSegments);\n    watcher[1] = yield fork(takeLatest, ACTION_DOWNLOAD_CUSTOMERS_SAGA, prepareToDownload);\n    // watcher[1] = yield fork(takeLatest, ACTION_FILTER_SEGMENT_LIST_SAGA, getFilteredSegments);\n    yield fork(takeLatest, ACTION_LEAVE_ANALYSE_PAGE, cancelSaga, watcher);\n}\n\nexport default [customerSaga];","/Users/vikas/Documents/rzt-nbp/src/pages/Analyse/Analyse.reducers.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.js",["371"],"import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {push} from 'react-router-redux';\nimport CSSModules from 'react-css-modules';\nimport styles from './Datasets.css';\n\nimport DatasetList from '../../containers/DatasetList/DatasetList';\nimport {actionTogglePopup} from './../../pages/Global/Global.actions';\n\nimport {actionDeleteDatasets, actionDeleteDatasetsSaga, actionChangeDatasetAction } from './Datasets.actions';\n\n@CSSModules(styles, {allowMultiple: true})\nclass Datasets extends React.Component {\n    constructor(props, ags) {\n        super(props, ags);\n    }\n\n    render() {\n\n        let {datasets, gotoSegment, changeAction, deleteAction,togglePopup} = this.props;\n        return (\n            <div styleName='wrapper'>\n                <div styleName=\"header\">\n                    <h3 styleName=\"header__title\">DATASETS</h3>\n                </div>\n                <div styleName=\"dataset-wrapper\">\n                        <div styleName=\"datasets\">\n                            <DatasetList records={datasets}\n                                     togglePopup={togglePopup}\n                                     gotoSegment={gotoSegment.bind(this)}\n                                     changeAction={changeAction.bind(this)}\n                                     deleteAction={deleteAction.bind(this)}/>\n                        </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapToProps = (state)=> {\n    return ({\n        datasets: state.datasets\n    })\n}, dispatcher = (dispatch)=>({\n    togglePopup: (data) => {\n        dispatch(actionTogglePopup(data));\n    },\n    gotoSegment: (path)=> {\n        dispatch(push(path))\n    },\n    changeAction: (action) => {\n        dispatch(actionChangeDatasetAction(action))\n    },\n    deleteAction: (action) => {\n        dispatch(actionDeleteDatasets(action));\n        dispatch(actionDeleteDatasetsSaga(action))\n    }\n});\n\n\nexport default connect(mapToProps, dispatcher)(Datasets);\n","/Users/vikas/Documents/rzt-nbp/src/pages/Datasets/Datasets.sagas.js",["372","373","374"],"import {takeLatest, takeEvery, call, put, fork} from 'redux-saga/effects';\n\nimport { request, cancelSaga } from '../../utils';\nimport { listener, unsubscribe } from './../../utils/request';\n\nimport {\n  ACTION_DATASET_LISTENER_SAGA,\n  ACTION_LOAD_DATASETS_SAGA,\n  ACTION_UNSUBSCRIBE_DATASET_LISTENER_SAGA,\n  ACTION_CHANGE_DATASET_ACTION_SAGA,\n  ACTION_DELETE_DATASET_SAGA,\n  ACTION_LEAVE_DATASETS_PAGE,\n  URL_DATASETS_PROGRESS,\n  url_datasets,\n  URL_DATASETS_NEW,\n  url_datasets_action\n} from './Datasets.constants';\n\nimport {\n  actionSetDatasets,\n  actionUpdateDataset,\n  actionDeleteDatasets} from './Datasets.actions';\n\n\nvar showDialog = function () {\n  return { type: 'none'}\n}\n\nexport function* getDatasets({payload = { } }) {\n  try {\n    let apiResponse = yield call(request(), url_datasets());\n    yield put(actionSetDatasets(apiResponse));\n    return apiResponse ;\n  } catch (error) {\n    yield put(showDialog({\n      title: \"Error\",\n      message: `Failed to delete model (${error})`,\n      type: \"DIALOG_TYPE_OK\"\n    }));\n  }\n}\n\nexport function* changeActionDatasets({payload}) {\n    try {\n        let {dataset_id, type} = payload;\n        console.log(payload);\n        var apiResponse = yield call(request(\"PUT\"), url_datasets_action(dataset_id, type));\n        yield put(actionUpdateDataset({...apiResponse, dataset_id}));\n  } catch (error) {\n    yield put(showDialog({\n      title: \"Error\",\n      message: `Failed to change action on model (${error})`,\n      type: \"DIALOG_TYPE_OK\"\n    }));\n  }\n}\n\nexport function* deleteDataset({payload = 0 }) {\n  try {\n    let {dataset_id, action} = payload;\n    yield call(request(\"PUT\"), url_datasets_action(dataset_id, action));\n    yield put(actionDeleteDatasets(payload));\n\n  } catch (error) {\n    yield put(showDialog({\n      title: \"Error\",\n      message: `Failed to delete model (${error})`,\n      type: \"DIALOG_TYPE_OK\"\n    }));\n  }\n}\n\nexport function* datasetListener( { payload } ){\n    console.log(\"datasetListener\",payload);\n    try {\n        yield call(listener, payload.url, payload.cb , data => data);\n    } catch (error) {\n        yield put(showDialog({\n            title: \"Error\",\n            message: `Failed to subscribe model (${error})`,\n            type: \"DIALOG_TYPE_OK\"\n        }));\n    }\n}\n\nexport function* unsubscribeDatasetListener( payload ){\n    try {\n        yield call( unsubscribe );\n    } catch (error) {\n        yield put(showDialog({\n            title: \"Error\",\n            message: `Failed to unsubscribe model (${error})`,\n            type: \"DIALOG_TYPE_OK\"\n        }));\n    }\n}\n\nfunction* datasetSaga() {\n  let watcher = [];\n  watcher[0] = yield fork(takeLatest, ACTION_LOAD_DATASETS_SAGA, getDatasets);\n  watcher[1] = yield fork(takeLatest, ACTION_CHANGE_DATASET_ACTION_SAGA, changeActionDatasets);\n  watcher[2] = yield fork(takeLatest, ACTION_DELETE_DATASET_SAGA, deleteDataset);\n  watcher[3] = yield fork(takeEvery, ACTION_DATASET_LISTENER_SAGA, datasetListener );\n  watcher[4] = yield fork(takeLatest, ACTION_UNSUBSCRIBE_DATASET_LISTENER_SAGA, unsubscribeDatasetListener );\n\n  yield fork(takeLatest, ACTION_LEAVE_DATASETS_PAGE, cancelSaga, watcher);\n}\n\nexport default [ datasetSaga ];","/Users/vikas/Documents/rzt-nbp/src/components/PageHeader/index.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.js",["375","376","377","378","379","380","381","382","383","384","385","386"],"import * as React from \"react\";\nimport {connect} from \"react-redux\";\nimport {push} from \"react-router-redux\";\nimport _ from 'lodash';\n\nimport CSSModules from \"react-css-modules\";\nimport styles from \"./Customers.css\";\nimport DropDown from \"./../../components/DropDown/DropDown\";\nimport CustomerList from \"./../../containers/CustomerList/CustomerList\";\nimport Pagination from \"./../../components/Pagination/Pagination\";\nimport classNames from \"classnames\";\nimport {actionSagaLoadCustomersList, actionSagaLoadCondensedSegmentsList} from \"./Customers.actions.js\";\n\nconst dropdownOptions = [\n    { id: 1, name: 'CUSTOMER ID' },\n    // { id: 2, name: 'AFFLUENCE'} ,\n    // { id: 3, name: 'PROFILE'},\n    // { id: 4, name: 'LIFECYCLE_PROPENSITY'},\n    { id: 5, name: 'EVENT'}];\n\nconst maps = {\n    'AVG AGE' : 'age',\n    'CUSTOMER ID': 'id',\n    'AFFLUENCE' : 'affluence',\n    'PROFILE' : 'segment_propensity',\n    // 'LIFECYCLE_PROPENSITY' : 'lifecycle_propensity',\n    // 'OVERALL PROPENSITY' : 'overall_propensity',\n    'EVENT' : 'event_propensity'\n};\nconst revmaps = _.reduce(maps, (acc, value, key)=>({\n    ...acc,\n    [value]: key\n}), { })\n\n\nclass Customers extends React.Component {\n\n    constructor(props, ags) {\n        super(props, ags);\n        this.state = {\n            sortBy: 'name',\n            sortOrder: 'Ascending'\n        }\n    }\n\n    render() {\n\n\n        {/*<DropDownTreeList options={segmentsList}*/}\n        {/*onClick={(segment) => {*/}\n        {/*gotoSegment(`/datasets/${this.props.params.datasetId}/customers?segmentId=${segment.id}&segmentName=${segment.name}&pageno=1`)*/}\n        {/*}}*/}\n        {/*globalClass={'fright margin-l-15'}*/}\n        {/*OptionsTitle={'SEGMENT'}*/}\n        {/*selectedOptionId={segmentId}/>*/}\n\n        let {customer, gotoSegment, loadCustomers, segmentsList} = this.props;\n        let {segmentId, segmentName, sortby} = this.props.location.query;\n        let selected =  revmaps[(sortby||'').replace('-','')];\n        let selectedOption = selected && dropdownOptions.find( item => item.name == selected ).id;\n        return (\n            <div styleName='wrapper'>\n                <div styleName=\"header\" className=\"clearfix\">\n                    <div styleName=\"header__title\">\n                        <h3 className=\"fleft\">CUSTOMERS</h3>\n                    </div>\n                    {segmentsList && (segmentsList.length > 0) &&  <DropDown\n                        placeholder = { \"SORT BY\" }\n                        options={segmentsList}\n                        displayValue={'name'}\n                        uKey={'id'}\n                        onClick={ ( { id, name } ) => {\n                            gotoSegment(`/datasets/${this.props.params.datasetId}/customers?segmentId=${id}&segmentName=${name}&pageno=1`)\n                        } }\n                        wrapperClass={classNames(styles.segmentDropdown)}\n                        globalClass={'fright'}\n                        headStyle={\"fright\"}\n                        selectedOption={segmentId} />\n                    }\n                    <DropDown options={dropdownOptions}\n                              placeholder = { \"SORT BY\" }\n                              key={sortby}\n                              displayValue={\"name\"}\n                              uKey={\"id\"}\n                              onClick={ ( { name } ) => {\n\n                                  let url = `/datasets/${this.props.params.datasetId}/customers?`;\n                                  if (segmentId) url = `${url}&segmentId=${segmentId}`\n                                  if (segmentName) url = `${url}&segmentName=${segmentName}`\n                                  url = `${url}&sortby=${maps[name]}`;\n\n                                  gotoSegment(url);\n                              } }\n                              selectedOption ={ selectedOption }\n                              wrapperClass={classNames(styles.segmentDropdown)}\n                              globalClass={'fright'}\n                              sortable= { true }\n                              toggleSort = { () =>{\n\n                                  let url = `/datasets/${this.props.params.datasetId}/customers?`;\n                                  if (segmentId) url = `${url}&segmentId=${segmentId}`\n                                  if (segmentName) url = `${url}&segmentName=${segmentName}`\n\n                                  if (sortby) {\n                                      if (sortby.includes('-'))\n                                          url = `${url}&sortby=${sortby.replace('-','')}`\n                                      else\n                                          url = `${url}&sortby=-${sortby}`\n\n                                  };\n\n                                  gotoSegment(url);\n\n                              }}\n                              headStyle={\"fright\"}\n                    />\n\n                </div>\n                <div styleName=\"customerList-wrapper\">\n                    <div styleName=\"customerList\">\n                        { customer && customer.data && <CustomerList\n                            sortBy={this.state.sortBy}\n                            sortOrder={this.state.sortOrder}\n                            onClick={({id})=>{\n                                gotoSegment(`/datasets/${this.props.params.datasetId}/customers/${id}?segmentId=${this.props.location.query.segmentId}&segmentName=${this.props.location.query.segmentName}`)\n                            }}\n                            records={customer.data}\n                            gotoSegment={gotoSegment.bind(this)}\n                            page={'customers'}/> }\n                    </div>\n                </div>\n                <div styleName=\"pagination\">\n                    {customer && <Pagination group_id={customer.segmentid || null}\n                                             totalCount={customer.meta && customer.meta.count}\n                                             pageNo={customer.meta && customer.meta.pageno || 1}\n                                             pagesize={100}\n                                             loadPageData={(data)=>{\n                                                let url = `/datasets/${this.props.params.datasetId}/customers?`\n\n                                                if (this.props.location.query.segmentId) url = `${url}segmentId=${this.props.location.query.segmentId}`\n                                                if (this.props.location.query.segmentName) url = `${url}&segmentName=${this.props.location.query.segmentName}`\n                                                if (this.props.location.query.sortby) url = `${url}&sortby=${this.props.location.query.sortby}`\n\n                                                 url = `${url}&pageno=${data.pageno||1}`\n                                                 gotoSegment(url);\n                                             }}\n                                             page={'customers'}/>}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapToProps = (state) => {\n    return ({\n        customer: state.customers.customer,\n        segmentsList: state.customers.segmentsList\n    })\n}, dispatcher = (dispatch) => ({\n    loadCustomers: (data) => {\n        dispatch(actionSagaLoadCustomersList(data))\n    },\n    loadCondensedSegments: (data) => {\n        dispatch(actionSagaLoadCondensedSegmentsList(data))\n    },\n    gotoSegment: (path) => {\n        dispatch(push(path))\n    }\n});\n\n\nexport default connect(mapToProps, dispatcher)(Customers);\n","/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.sagas.js",["387","388","389"],"import {takeLatest, call, put, fork} from 'redux-saga/effects';\nimport {request, cancelSaga} from '../../utils';\nimport {\n    ACTION_LOAD_CUSTOMER_SAGA,\n    ACTION_LEAVE_FEEDBACK_PAGE,\n    url_load_customer\n} from './Feedback.constants';\nimport { get } from 'lodash';\n\nimport { actionLoadCustomers, actionLoadCustomer } from './Feedback.actions';\n\nexport function* loadCustomer({payload={}}) {\n    let params = payload;\n    let {dataset_id, id} =payload;\n    let customerData = yield call(request(\"GET\"), url_load_customer(dataset_id, id), params, (data) => data);\n    if (!customerData) return;\n    let transactionHistory = customerData.transaction_history;\n    yield put(actionLoadCustomer({ currentCustomer : { ...customerData, transactionHistory }}));\n}\n\nfunction* customerSaga() {\n    let watcher = []\n    watcher[0] = yield fork(takeLatest, ACTION_LOAD_CUSTOMER_SAGA, loadCustomer);\n    yield fork(takeLatest, [ACTION_LEAVE_FEEDBACK_PAGE], cancelSaga, watcher);\n}\n\nexport default [ customerSaga ];","/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.sagas.js",["390"],"import {takeLatest, call, put, fork} from 'redux-saga/effects';\nimport {request, cancelSaga} from '../../utils';\nimport {\n    ACTION_LEAVE_CUSTOMERS_PAGE,\n    ACTION_LOAD_CUSTOMERS_LIST_SAGA,\n    url_get_customers,\n    url_get_condensed_segments_list,\n    ACTION_LOAD_CONDENSED_SEGMENTS_LIST_SAGA\n} from './Customers.constants';\n\nimport {\n    actionLoadCustomersList,\n    actionLoadCondensedSegmentsList\n} from './Customers.actions';\n\nvar showDialog = function (...e) {\n    console.error(\"error\", e);\n    return {type: 'none'}\n}\n\nfunction* loadCustomers({payload = {}}) {\n    try {\n        let {pagesize, pageno, dataset_id, sortby, segment_id} = payload;\n\n        let apiResponse = yield call(request(), url_get_customers(dataset_id, segment_id, { pagesize, pageno, sortby }), payload, data => data);\n        yield put(actionLoadCustomersList(apiResponse));\n        return apiResponse;\n\n    } catch (error) {\n        yield put(showDialog({\n            title: \"Error\",\n            message: `(${error})`,\n            type: \"DIALOG_TYPE_OK\"\n        }));\n    }\n}\n\nfunction* loadCondensedSegments({payload = {}}) {\n    try {\n        let {dataset_id, segment_id} = payload;\n        let apiResponse = yield call(request(), url_get_condensed_segments_list(dataset_id, segment_id), payload, data => data);\n        yield put(actionLoadCondensedSegmentsList(apiResponse));\n        return apiResponse;\n\n    } catch (error) {\n        yield put(showDialog({\n            title: \"Error\",\n            message: `(${error})`,\n            type: \"DIALOG_TYPE_OK\"\n        }));\n    }\n}\n\nfunction* customerSaga() {\n    let watcher = [];\n    watcher[0] = yield fork(takeLatest, ACTION_LOAD_CUSTOMERS_LIST_SAGA, loadCustomers);\n    watcher[1] = yield fork(takeLatest, ACTION_LOAD_CONDENSED_SEGMENTS_LIST_SAGA, loadCondensedSegments);\n    // watcher[1] = yield fork(takeLatest, ACTION_FILTER_SEGMENT_LIST_SAGA, getFilteredSegments);\n    yield fork(takeLatest, ACTION_LEAVE_CUSTOMERS_PAGE, cancelSaga, watcher);\n}\n\nexport default [customerSaga];","/Users/vikas/Documents/rzt-nbp/src/pages/Customers/Customers.reducers.js",[],"/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.js",["391","392","393"],"import * as React from \"react\";\nimport _ from 'lodash';\n\nimport {connect} from \"react-redux\";\nimport CSSModules from \"react-css-modules\";\nimport styles from \"./Feedback.css\";\nimport classNames from \"classnames\";\nimport SecondaryList from \"../../components/SecondaryList/SecondaryList\";\nimport TransactionDetails from \"../../components/TransactionDetails/TransactionDetails\";\nimport SalesPitchList from \"../../components/SalesPitchList/SalesPitchList\";\nimport ListContainer from \"../../containers/ListContainer/ListContainer\";\nimport ScoreList from \"../../components/ScoreList/ScoreList\";\nimport {actionLoadTransactionsSaga, actionBothLoadTransactions} from \"./Feedback.actions\";\nimport * as d3 from \"d3\";\n\nconst length = 10;\n\nconst color = d3.scaleLinear()\n    .domain([0, length / 2, length])\n    .range([d3.rgb(\"#d12f2f\"), d3.rgb('#FFC107'), d3.rgb('#21e1ad')])\n    .interpolate(d3.interpolateHcl);\n\nclass Customers extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            visibility: {\n                profile: false,\n                salesPitch: false,\n            }\n        }\n    }\n\n\n\n    togglePanel(panel) {\n        let newVisibility = this.state.visibility;\n        newVisibility[panel] = !newVisibility[panel];\n        this.setState({visibility: newVisibility});\n    }\n    getFieldColor(value, label) {\n        if (label.toUpperCase() == \"LIFECYCLE\") {\n            return value<0? d3.rgb(\"#d12f2f\"): d3.rgb('#21e1ad')\n        }\n        return color(value / length)\n    }\n\n    getPropensities = propensities => propensities.map( prop => ({ ...prop, value : (prop.value * 100).toFixed(2)}));\n\n    render() {\n        let {customersProfile, salesPitch, propensities} = this.props;\n        return (\n            <div styleName=\"customers__wrapper\" className=\"clearfix\">\n\n                <div styleName={`customers__col1-wrapper ${ !this.state.visibility.profile ? 'hide' : ''}`}\n                     className=\"fleft\">\n                    <div className={styles.customers__col1}>\n                        { customersProfile.map((data, index) => (\n                            <SecondaryList listData={data} key={index}/>\n                        ))}\n                    </div>\n                    <button styleName=\"collapseButton expandButtonRight\"\n                            onClick={() => this.togglePanel('profile')}\n                            data-tooltip=\"CUSTOMER PROFILES\"\n                            className={\"tooltip\"}>\n                        <span styleName=\"arrowLeft\"/>\n                    </button>\n                </div>\n\n                <div styleName=\"customers__col2\" className=\"fleft\">\n                    <TransactionDetails transactionRecords={this.props.transactionHistory}\n                                        eventRecords={this.props.events}\n                                        transactionChart={this.props.transactionChart}/>\n                </div>\n\n                <div styleName={`customers__col3-wrapper ${ !this.state.visibility.salesPitch ? 'hide' : ''}`}\n                     className=\"fleft\">\n                    <div className={styles.customers__col3}>\n                        {salesPitch && <div className={styles.actionableInsightsList}>\n\n                            <header className={styles.actionableInsightsList__header}>\n                                <span\n                                    className={styles.actionableInsightsList__header__title}>ACTIONABLE INSIGHTS</span>\n                            </header>\n                            <section className={styles.actionableInsightsList__section}>\n                                {salesPitch.li_policies && salesPitch.li_policies.length > 0 &&\n                                    <SalesPitchList title={'PREMISE & PITCH'} list={salesPitch.li_policies}/>}\n                                {salesPitch.reasons_to_buy && salesPitch.reasons_to_buy.length > 0 &&\n                                    <SalesPitchList title={'REASONS TO BUY'} list={salesPitch.reasons_to_buy}/>}\n                                {salesPitch.reasons_not_to_buy && salesPitch.reasons_not_to_buy.length > 0 &&\n                                    <SalesPitchList title={'REASONS NOT TO BUY'} list={salesPitch.reasons_not_to_buy}/>}\n\n                            </section>\n\n                        </div>\n                        }\n                        { propensities && <ListContainer\n                                listTitle={\"PROPENSITY\"}\n                                listData={this.getPropensities(propensities)}\n                                globalClass={\"flexShrinkZero\"}\n                                getFieldColor={this.getFieldColor}\n                                list={ScoreList}/>\n                            }\n                    </div>\n\n                    <button styleName=\"collapseButton expandButtonLeft\"\n                            onClick={() => this.togglePanel('salesPitch')} data-tooltip=\"SALES-PITCH\"\n                            className={classNames(\"tooltip\", \"onleft\")}>\n                        <span styleName=\"arrowRight\"/>\n                    </button>\n\n                </div>\n            </div>);\n    }\n}\n\nconst mapToProps = (state) => {\n    /*TODO: divide the customers data so that they can be easily passed to the components*/\n    return ({\n        transactionHistory: _.get(state.customers, _.toPath('currentCustomer.transaction_history'), []),\n        events: _.get(state.customers, _.toPath('currentCustomer.event'), []),\n        customersProfile: _.get(state.customers, _.toPath('currentCustomer.profile'), []),\n        salesPitch: _.get(state.customers, _.toPath('currentCustomer.sales_pitch'), {}),\n        propensities: _.get(state.customers, _.toPath('currentCustomer.scores'), []),\n        transactionChart: _.get(state.customers, _.toPath('currentCustomer.transaction_chart'), []) || [],\n        loader: _.get(state.customers, _.toPath('loader'), false)\n    })\n}, dispatcher = (dispatch) => ({\n    /* dispatch event to change the customer */\n    // loadCustomer:(action) =>{\n    //   dispatch({\n    //     type : ACTION_LOAD_CUSTOMER_SAGA,\n    //     action : action\n    //   })\n    // }\n});\n\n\nconst customers = CSSModules(Customers, styles, {allowMultiple: true});\n\nexport default connect(mapToProps, dispatcher)(customers);\n","/Users/vikas/Documents/rzt-nbp/src/pages/Feedback/Feedback.reducers.js",["394","395"],"import {createReducerFromObject} from '../../utils';\n\nimport {ACTION_LEAVE_FEEDBACK_PAGE,\n    LOAD_CUSTOMERS_PROFILE_DATA,\n    ACTION_LOAD_CUSTOMERS,\n    ACTION_LOAD_CUSTOMER,\n    ACTION_LOAD_CUSTOMERS_SAGA,\n    ACTION_HIDE_LOADER,\n    ACTION_LOAD_CUSTOMER_SAGA} from './Feedback.constants';\n\nexport const initialState = {\n    customerList: {},\n    currentCustomer: {\n        profile: []\n    }\n}\n\nconst reducerFunctions = {\n    [ACTION_LOAD_CUSTOMER_SAGA]: (state) => {\n        return {\n            ...state\n        }\n    },\n    [ACTION_LOAD_CUSTOMERS_SAGA]: (state) => {\n        return {\n            ...state\n        }\n    },\n    [ACTION_LOAD_CUSTOMERS] : (state = initialState, payload) => {\n        if(!payload) return state;\n        return {\n          ...state,\n            customerList: payload.customerList\n        };\n    },\n\n    [ACTION_LOAD_CUSTOMER] : (state, payload) => {\n        if(!payload) return state;\n        return {\n            ...state,\n            currentCustomer: payload.currentCustomer\n        };\n    },\n    [ ACTION_LEAVE_FEEDBACK_PAGE ]: () => ({\n            ...initialState\n    })\n};\n\n\nconst customerPageReducer = createReducerFromObject(reducerFunctions, initialState);\n\nexport default customerPageReducer;","/Users/vikas/Documents/rzt-nbp/src/components/SecondaryList/SecondaryList.js",["396","397"],"import React from 'react';\nimport CSSModules from 'react-css-modules';\nimport styles from './SecondaryList.css';\n\nexport default class SecondaryList extends React.Component {\n    render() {\n        let {listData} = this.props;\n        return <div styleName=\"secondary-list\">\n            <h4 styleName=\"secondary-list__header\">\n                {listData.label}\n            </h4>\n            <ul styleName=\"secondary-list__container\">\n                {\n                    listData.values.map((data, index) => {\n                        return <li styleName=\"secondary-list__container__item\"\n                                   className=\"clearfix\"\n                                   key={index}>\n                            <span styleName=\"secondary-list__container__item__title\" className=\"fleft\">{data.label}</span>\n                            <span styleName=\"secondary-list__container__item__title-value\" className=\"fright\">{data.value}</span>\n                        </li>\n                    })\n                }\n            </ul>\n        </div>\n    }\n}\n","/Users/vikas/Documents/rzt-nbp/src/components/SalesPitchList/SalesPitchList.js",["398","399","400"],"import React from 'react';\nimport classNames from 'classnames';\nimport CSSModules from 'react-css-modules';\nimport styles from './SalesPitchList.css';\n\n class SalesPitchList extends React.Component{\n    static propTypes = {\n        list: React.PropTypes.array\n    }\n    static defaultProps = {\n        list: [],\n        title: ''\n    }\n    render(){\n        let { title, list }=this.props;\n        return (\n        <div styleName=\"list-wrapper\">\n        <header styleName=\"header\">\n            <span styleName=\"header__title\">{title}</span>\n        </header>\n            { list.length ? <ul styleName=\"list\">\n                    {  list.map((listData,i) => <li key={i} styleName=\"list__item\">{listData} </li>) } </ul>\n                : <span styleName=\"emptyData\"> NO REASONS FOUND </span> }\n        </div>);\n    }\n\n\n}\n\nexport default SalesPitchList;\n","/Users/vikas/Documents/rzt-nbp/src/containers/ListContainer/ListContainer.js",["401","402","403","404"],"import * as React from 'react';\nimport CSSModules from 'react-css-modules';\nimport styles from './ListContainer.css';\nimport classNames from 'classnames';\nimport DropDown from '../../components/DropDown/DropDown';\n\n// export default class ListContainer extends React.Component {\n//     render() {\n//         let {listTitle,listData,list,filter} = this.props;\n//         const List=list;\n//         return (<div styleName=\"wrapper\">\n//             <div styleName=\"header\">\n//                 <span styleName=\"header__title\">{listTitle}</span>\n//                 { filter  &&  <DropDown\n//                     options={['ALL', 'ON NET', 'OFF NET']}\n//                     onClick={setFilter}\n//                     clickParams={['all', 'onnet', 'offnet']}\n//                     wrapperClass={ styles.filterDropdown }\n//                     globalClass={\"fright\"}\n//                     headStyle={\"fright\"}\n//                 /> }\n//             </div>\n//             <List listData={listData}/>\n//         </div>)\n//     }\n// }\nclass ListContainer extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            filter : props.filter\n        }\n    }\n\n    setFilter = ( filterValue ) => {\n        this.setState({\n            filter: filterValue\n        });\n    }\n\n    filterList = () => (\n        (!this.state.filter || this.state.filter == 'all') ? this.props.listData.values : this.props.listData.values.filter( item => item.type == this.state.filter )\n    )\n\n    componentDidMount(){\n        if((this.props.listData.type || '').toUpperCase() == 'PROGRESS')\n            this.setState({ filter : 'all' })\n    }\n\n    render() {\n        let {listTitle,listData,list,filterList,options,clickParams,globalClass,getFieldColor} = this.props;\n        const List = list;\n        return (\n\n            <div styleName=\"wrapper\" className={classNames(globalClass)}>\n\n                <div styleName=\"header\">\n                    <span styleName=\"header__title\">{listTitle}</span>\n                    { this.state.filter  &&  <DropDown\n                        options={options}\n                        onClick={this.setFilter}\n                        clickParams={clickParams}\n                        wrapperClass={ styles.filterDropdown }\n                        globalClass={\"fright\"}\n                        headStyle={\"fright\"}\n                    /> }\n                </div>\n                {filterList ? <List listData={this.filterList()}/> :  <List listData={listData} getFieldColor={getFieldColor}/>}\n            </div>\n        )\n    }\n}\n\nexport default ListContainer;\n","/Users/vikas/Documents/rzt-nbp/src/components/ScoreList/ScoreList.js",["405"],"import React from 'react';\nimport classNames from 'classnames';\nimport CSSModules from 'react-css-modules';\nimport styles from './ScoreList.css';\n\nconst ScoreList = ({listData,getFieldColor}) => (\n    <ul styleName=\"list\">\n        { listData && listData.map((item, index) => {\n\n\n            let value = item.value == null ? '--' : Number(item.value || 0)\n\n            return (\n                <li styleName=\"list__item\"\n                        style={{borderRightColor: getFieldColor(item.value, item.label)}}\n                        key={index}>\n                    <span styleName=\"list__item__title\"\n                          title={item.label}>\n                        {item.label}\n                    </span>\n                    <span styleName=\"list__item__subTitle\"\n                          title={value + '%'}>\n                        {value + '%'}\n                    </span>\n                </li>\n            )\n        })}\n    </ul>\n)\n\nexport default CSSModules(ScoreList, styles, {allowMultiple: true});","/Users/vikas/Documents/rzt-nbp/src/components/TransactionDetails/TransactionDetails.js",[],"/Users/vikas/Documents/rzt-nbp/src/containers/TransactionChart/TransactionChart.js",["406","407","408","409"],"import React, {Component} from 'react';\nimport LineGraph from './../../components/LineGraph/LineGraph';\nimport ChartFilters from './../../components/ChartFilters/ChartFilters';\nimport classNames from 'classnames';\nimport styles from './TransactionChartContainer.css';\nimport CSSModules from 'react-css-modules';\nimport {formatINR, shortenINR} from './../../utils';\n\nimport './TransactionCharts.css';\n\n\nconst moment = require('moment');\n\nconst mmmmm_yyyy = (date) => moment(date).format(\"MMMM YYYY\");\n\nclass LineChartContainer extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.records !== nextProps.records)\n            this.props.setFilters({\n                min: 0,\n                max: nextProps.records.length - 1\n            })\n    }\n\n    getLineChartData = () => ({\n        cartesian: {\n            stroke: \"#dddddd\",\n            vertical: false\n        },\n        graph: {\n            data: this.props.records.map(d => ({\n                ...d,\n                time: moment(d.time).format('MMM \\'YY')\n            }))\n        },\n        xAxis: {\n            dataKey: \"time\",\n            tickLine: true\n        },\n        yAxis: {\n            axisLine: false,\n            tickLine: false,\n            tickFormatter: shortenINR\n        },\n        tooltip: {\n            formatter: formatINR\n        },\n        legend: [\n            {text: 'Total Monthly Credit Transactions', iconColor: \"#25bf33\"},\n            {text: 'Max Monthly Credit Transactions', iconColor: \"#95fa6e\"},\n            {text: 'Total Monthly Debit Transactions', iconColor: \"#f02e2e\"},\n            {text: 'Monthly Daily Average Balance', iconColor: \"#daa520\"}\n        ],\n        legendStyle: {\n            position: \"absolute\",\n            height: \"auto\",\n            top: \"-29px\",\n            right: \"0\",\n            width: \"100%\"\n        },\n        dataKeyList: [\n            {\n                name: \"Total Credit\",\n                dataKey: \"t_credit\",\n                stroke: \"#25bf33\",\n            }, {\n                name: \"Max Credit\",\n                dataKey: \"max_credit\",\n                stroke: \"#95fa6e\"\n            }, {\n                name: \"Total Debit\",\n                dataKey: \"t_debit\",\n                stroke: \"#f02e2e\"\n            }, {\n                name: \"MDAB\",\n                dataKey: \"mdab\",\n                stroke: \"#daa520\"\n            }\n        ]\n\n    })\n\n    render() {\n        let {id, records, txnFilters, setFilters} = this.props;\n        let {min, max} = txnFilters;\n        let isRecordsEmpty = records.length < 1;\n        return (\n            <div className={classNames(styles.chartSection, \"clearfix\")}>\n                <div className={classNames(styles.chartSectionHeader, 'clearfix')}>\n                    <h2 className={classNames(styles.subSectionHeadtxt, 'fleft')}>CUSTOMER TRANSACTION HISTORY</h2>\n                    {!isRecordsEmpty &&\n                    <span className={classNames(styles.subSectionText, \"fright\")}>\n                        { `${records[0].month} - ${records[records.length - 1].month}`}\n                        </span>\n                    }\n                </div>\n\n                <div className={styles.subsectionContent}>\n                    <div className={classNames(styles.area, \"clearall\")} ref={(c) => {\n                        this.chartArea = c;\n                    }}>\n                        {\n                            !isRecordsEmpty &&\n                            <ChartFilters segments={records.length} setFilters={setFilters} customerId={id}>\n                                { !isRecordsEmpty &&\n                                <LineGraph responsive=\"true\" lineData={this.getLineChartData()} chartType=\"linear\"/>}\n                            </ChartFilters>\n\n                        }\n                    </div>\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n\n\nLineChartContainer.defaultProps = {\n    min: 0,\n    max: 0,\n    id: 0,\n    records: []\n}\n\nLineChartContainer.propTypes = {\n    min: React.PropTypes.number,\n    max: React.PropTypes.number,\n    id: React.PropTypes.number,\n    records: React.PropTypes.array\n}\n\nexport default CSSModules(LineChartContainer, styles, {allowMultiple: true});\n","/Users/vikas/Documents/rzt-nbp/src/components/TransactionTable/TransactionTable.js",["410"],"import React from 'react';\nimport Table from '../Table/Table';\n\n// import uniq from 'lodash/fp/uniq';\nimport { formatINR } from './../../utils';\n\nconst moment = require('moment');\n\nconst TransactionTable = ({records, minFilter, maxFilter, timeSegments, isVisible = true}) => {\n  let columns = [\n    { key: 'date', title: 'Date', width: '95px' },\n    { key: 'mode', title: 'Mode', width: '90px' },\n    { key: 'type', title: 'Type', width: '65px' },\n    // { key: 'event_type', title: 'Event', width: '70px' },\n    { key: 'summary', title: 'Txn Particulars', width: 'auto' },\n    { key: 'amount', title: 'Amount', width: '110px', style: { textAlign: 'right' } }\n  ];\n    let filteredRecords = records\n//    .filter(d => {\n//        const min = Math.floor(minFilter);\n//        let beginning = timeSegments[min];\n//        if (minFilter > min && min > 0){\n//          beginning = moment(timeSegments[min]).add(1, 'days')\n//        }\n//        let ending = moment(new Date(timeSegments[maxFilter])).add(1, 'months').subtract(1, 'days').valueOf();\n//        if(!beginning && !ending) return true;\n//        return (+new moment(d.date, 'DD-MM-YYYY') >= beginning && +new moment(d.date, 'DD-MM-YYYY') <= ending);\n//    })\n    .map(d => ({\n      ...d,\n      amount: formatINR(d.amount || 0)\n    }));\n\n  return (\n    <Table\n      records={filteredRecords}\n      columns={columns}\n      id={'id'}\n      isVisible={isVisible}\n      showMoreButton={true}\n    />\n  );\n};\n\nTransactionTable.defaultProps = {\n  records : [],\n  minFilter: 0,\n  maxFilter: 0,\n  timeSegments: [],\n  isVisible: false\n};\n\nTransactionTable.propTypes = {\n  records : React.PropTypes.array,\n  minFilter: React.PropTypes.number,\n  maxFilter: React.PropTypes.number,\n  timeSegments: React.PropTypes.array,\n  isVisible: React.PropTypes.bool\n};\n\nexport default TransactionTable;\n","/Users/vikas/Documents/rzt-nbp/src/components/EventTable/EventTable.js",["411","412"],"import React from 'react';\nimport Table from '../Table/Table';\n// import Pill from '../Pill';\n\nwindow.React = React;\n\nconst moment = require('moment');\n\nconst EventTable = ({records, timeSegments, minFilter, maxFilter, isVisible}) => {\n  /* The commented code below is temporary; DO NOT delete them */\n  let beginning = timeSegments[minFilter];\n  let ending = moment(timeSegments[maxFilter - 1]).add(1, 'months').subtract(1, 'days').valueOf();\n  let filteredRecords = records\n    // .filter(d => {\n    //   console.log(d.date);\n    //     return (+new Date(d.date) >= beginning && +new Date(d.date) <= ending);\n    // })\n    // .map(record => ({\n    //   ...record,\n    //   date: recor\n    //   // event_type: <Pill color='#a8a8ff' />\n    // }));\n\n  let columns = [\n    // { key: 'event_type', title: '', width: '90px' },\n    { key: 'date', title: 'Date', width: '95px' },\n    { key: 'event', title: 'Event', width: 'auto' }\n  ];\n\n  return (\n    <Table\n      records={filteredRecords}\n      columns={columns}\n      id={'id'}\n      className=\"mainTable\"\n      isVisible={isVisible}\n      showMoreButton={true}\n    />\n  );\n};\n\nEventTable.defaultProps = {\n  records:[],\n  timeSegments: [],\n  minFilter: 0,\n  maxFilter: 0,\n  isVisible: false\n}\n\nEventTable.propTypes = {\n  records:React.PropTypes.array,\n  timeSegments: React.PropTypes.array,\n  minFilter: React.PropTypes.number,\n  maxFilter: React.PropTypes.number,\n  isVisible: React.PropTypes.bool\n}\n\nexport default EventTable;\n","/Users/vikas/Documents/rzt-nbp/src/components/LineGraph/LineGraph.js",["413","414"],"import React, { Component } from 'react';\nimport { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip, Legend } from 'recharts';\nimport styles from './LineGraph.css';\nimport classNames from 'classnames';\nimport _ from 'lodash';\n\nconst CustomizedLegend = ({ legendList }) => (\n    <ul className={classNames(styles.legend, \"fright\")}>\n        {legendList && legendList.map((legend, index) => <li key={`legend-${index}`} className=\"clearfix\"><span\n            className={classNames(styles.legendIcon, \"fleft\")}\n            style={{ background: legend.iconColor }}></span><span\n            className={classNames(styles.legendText, \"fleft\")}>{legend.text}</span>\n        </li>)}\n    </ul>\n);\n\n\nconst CustomTooltip = ({ payload }) => {\n    let data = payload[0] && payload[0].payload;\n    return <div className={styles.customTooltip}>\n        {_.map(data, (value, key) => <p key={key}>\n            <span className={styles.tooltipKey}>{key}</span>\n            : <span\n            className={styles.tooltipValue}>{ value ? value : 0 }</span>\n        </p>)}\n    </div>;\n};\nconst CustomAxisLabel = ({ axisType, ix, iy, text, x, y, width, height }) => {\n    const isVert = axisType === 'yAxis';\n    const rot = isVert ? -90 : 0;\n    const trans = isVert ? '(0,-8)' : '(0,3)';\n    const cx = isVert ? ix + x - height / 2 : ix + x + (width / 2);\n    const cy = isVert ? iy + y + (height / 2) : iy + y + (height / 2) + 10;\n\n    return (\n        <text x={cx || 0} y={cy || 0} transform={`rotate(${rot}) translate${trans}`} textAnchor=\"middle\">\n            {text}\n        </text>\n    );\n};\n\nclass LineGraph extends Component {\n    shouldComponentUpdate (nextProps) {\n        return this.props.data !== nextProps.data;\n    }\n\n    render () {\n        let { chartType, lineData, type, needsDot, responsive } = this.props;\n\n        let Graph = <LineChart margin={{ top: 5, right: 5, bottom: 5, left: 0 }}\n                               className=\"ax-chart_line\" {...lineData.graph}>\n            <Legend content={<CustomizedLegend legendList={lineData.legend}/>} wrapperStyle={lineData.legendStyle}/>\n            {\n                lineData.dataKeyList.map((line, index) => <Line key={index}\n                                                                type={chartType}\n                                                                dot={needsDot == undefined ? true : needsDot}\n                                                                animationDuration={1000}\n                                                                name={line.name}\n                                                                dataKey={line.dataKey}\n                                                                stroke={line.stroke}/>)\n            }\n            <CartesianGrid {...lineData.cartesian}/>\n            <XAxis {...lineData.xAxis} label={<CustomAxisLabel {...lineData.xAxisLabel}/>}/>\n            <YAxis {...lineData.yAxis} label={<CustomAxisLabel {...lineData.yAxisLabel}/>}/>\n            { lineData.customTooltip ? <Tooltip content={<CustomTooltip />}/> : <Tooltip {...lineData.tooltip}/>}\n        </LineChart>;\n\n        return (\n            <div className={styles.lineWrapper}>\n                { responsive ? <ResponsiveContainer>{Graph}</ResponsiveContainer> : Graph }\n            </div>\n        );\n    }\n}\n\nLineGraph.defaultProps = {\n    data: []\n};\n\nLineGraph.propTypes = {\n    data: React.PropTypes.array\n};\n\nexport default LineGraph;\n","/Users/vikas/Documents/rzt-nbp/src/components/ChartFilters/ChartFilters.js",[],"/Users/vikas/Documents/rzt-nbp/src/components/Table/Table.js",["415"],"import React from 'react';\nimport classNames from 'classnames';\nimport styles from './Table.css';\nimport noop from 'lodash/fp/noop';\n\nconst get = (key, items) => items.map(item => item[key]);\n\nconst TableColGroup = ({colWidths}) => (\n  <colgroup>\n    {\n      colWidths.map((width, i) => (<col style={{width}} key={i}></col>))\n    }\n  </colgroup>\n);\n\nconst TableHeader = ({headers, colWidths}) => (\n  <div className={styles.head}>\n    <table>\n      <TableColGroup colWidths={colWidths} />\n      <tbody>\n      <tr>\n        {\n          headers.map((header, i) => (<th key={i}>{header}</th>))\n        }\n      </tr>\n      </tbody>\n    </table>\n  </div>\n);\n\nclass TableRow extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.text !== nextProps.text;\n  }\n\n  render(){\n\n    let {title, styles, text,colName} = this.props;\n    return <td title={title} style={styles}>\n      <span>{text}</span>\n    </td>\n  }\n}\n\nconst TableBody = ({records, colWidths, columns, inlineStyles, id, onClick}) => (\n  <div className={styles.body}>\n    <table>\n      <TableColGroup colWidths={colWidths} />\n      <tbody>\n      {\n        records.map((record, i) => (\n          <tr key={i} onClick={() => { onClick(record) }}>\n            {\n              columns.map((col, j) => (\n                <TableRow key={i +\"__\"+j} colName={col} title={record[col]} styles={inlineStyles[j]} text={record[col]}/>\n              ))\n            }\n          </tr>\n        ))\n      }\n      </tbody>\n    </table>\n  </div>\n);\n\nconst Table = ({records, columns, id, onClick, className, isVisible }) => {\n  return <div\n    className={classNames(styles.table,\n      (className === 'headerList') ? styles.headerList : '',\n      styles.noWordBreak,\n      isVisible ? 'disp-block' : 'disp-none') }>\n    <TableHeader headers={get('title', columns)} colWidths={get('width', columns)}/>\n    <TableBody\n      records={records}\n      colWidths={get('width', columns)}\n      columns={get('key', columns)}\n      inlineStyles={get('style', columns)}\n      onClick={onClick}\n      id={id}\n    />\n  </div>\n};\n\n\nTable.defaultProps = {\n  records: [],\n  columns: [],\n  id: '',\n  onClick: noop,\n  className: '',\n  isVisible: false,\n  showMoreButton:false\n};\n\nTable.propTypes = {\n  records: React.PropTypes.array,\n  columns: React.PropTypes.array.isRequired,\n  id: React.PropTypes.string,\n  onClick: React.PropTypes.func,\n  className: React.PropTypes.string,\n  isVisible: React.PropTypes.bool,\n  showMoreButton: React.PropTypes.bool\n};\n\nTableBody.defaultProps = {\n  records: [],\n  colWidths: [],\n  columns: [],\n  inlineStyles: [],\n  id: '',\n  onClick: noop\n};\n\nTableBody.propTypes = {\n  records: React.PropTypes.array,\n  colWidths: React.PropTypes.array,\n  columns: React.PropTypes.array,\n  inlineStyles: React.PropTypes.array,\n  id: React.PropTypes.string,\n  onClick: React.PropTypes.func\n};\n\nTableRow.defaultProps = {\n  title: '',\n  styles: {},\n  text: ''\n};\n\nTableRow.propTypes = {\n  title: React.PropTypes.any,\n  styles: React.PropTypes.object,\n  text: React.PropTypes.any\n}\n\nTableHeader.defaultProps = {\n  headers: [],\n  colWidths:[]\n};\n\nTableHeader.propTypes = {\n  headers: React.PropTypes.array,\n  colWidths: React.PropTypes.array\n};\n\nTableColGroup.defaultProps = {\n  colWidths: []\n};\n\nTableColGroup.propTypes = {\n  colWidths: React.PropTypes.array\n};\n\n\nexport { TableColGroup, TableHeader, TableBody, Table };\nexport default Table;\n","/Users/vikas/Documents/rzt-nbp/src/components/PageHeader/DatasetsHeader.js",["416","417","418","419","420","421","422","423","424","425","426","427"],"/**\n * Created by vinojv on 14/11/16.\n */\nimport * as React from \"react\";\nimport _ from 'lodash';\nimport CSSModules from \"react-css-modules\";\nimport styles from \"./PageHeader.css\";\nimport logoPath from \"./../../images/logo.png\";\nimport {Link} from \"react-router-dom\";\nimport DownloadFile from './../../components/DownloadFile/DownloadFile';\nimport {connect} from 'react-redux';\nimport {actionSagaDownloadCustomers} from './../../pages/Analyse/Analyse.actions';\nimport DownloadSegmentsPopup from '../DownloadCustomers/DownloadCustomers'\n\nclass PageHeader extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            showDownload: false\n        }\n    }\n    render() {\n        let {route, downloadStatus, prepareForDownload} = this.props;\n\n        return (\n            <header styleName='header'>\n                <a styleName='header__logo' className=\"fleft\">\n                    <img src={logoPath} alt=\"logo\"/>\n                </a>\n                {route.page == 'datasets' && <h2 styleName='header__title' className=\"fleft\">\n                    <span className=\"text-bold\">NEXT BEST PRODUCT - BFSI</span>\n                </h2>}\n\n                { (route.page == 'segments' || route.page == 'customers') && <h2 styleName='header__title' className=\"fleft text-bold\">\n                    <Link className=\"back-button flaticon-arrows\"\n                          to={`${route.page == 'customers' ? `/datasets/${this.props.params.datasetId}/segments` : '/datasets'}`}/>\n                    BACK\n                    TO {(route.page == 'customers') ? 'SEGMENTS' : 'DATASETS'}\n                </h2>}\n\n                { (route.page == 'segments') && <DownloadFile\n                                                            downloadStatus={downloadStatus}\n                                                            prepareForDownload={()=>{\n                                                                this.setState({showDownload: true})\n                                                                 {/*preapareForDownload(Number(this.props.params.datasetId))*/}\n                                                            }\n                                                             }/>}\n                {(route.page == 'segments') && this.state.showDownload && <DownloadSegmentsPopup\n                    close={()=>{ this.setState({showDownload: false})}}\n                    dataset_id={this.props.params.datasetId}\n                    segments={this.props.segments}/>}\n\n            </header>\n        );\n    }\n}\n\nconst mapToProps = (state) => {\n    return ({\n        downloadStatus: state.global.download,\n        segments: _.get(state, _.toPath(\"analyse.segments\"), [])\n    })\n}, dispatcher = (dispatch) => ({\n    preapareForDownload: (id) => {\n        dispatch(actionSagaDownloadCustomers({ dataset_id: id }));\n    }\n});\n\nexport default connect(mapToProps, dispatcher)(PageHeader);\n","/Users/vikas/Documents/rzt-nbp/src/components/PageHeader/CustomersHeader.js",["428","429","430","431","432","433","434","435","436","437"],"/**\n * Created by vinojv on 14/11/16.\n */\nimport * as React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport CSSModules from \"react-css-modules\";\nimport {connect} from 'react-redux';\nimport {push} from 'react-router-redux';\nimport CustomerList from \"./../CustomerList/CustomerList\";\nimport styles from \"./PageHeader.css\";\nimport logoPath from \"./../../images/logo.png\";\nimport classNames from 'classnames';\n\nimport { actionSagaLoadCustomer} from '../../pages/Feedback/Feedback.actions';\n\nimport {ActionCreators as UndoActionCreators} from 'redux-undo'\n\nconst CustomerHeaderComp = ({loadPage, gotoPage, datasetId, toggleList, currentCustomerId, totalCustomers,\n    pagesize,\n    loadCustomerData, loadCustomersData, id = 0, handleNavigate = () => (0)}) => (\n    <div className=\"text-align-center\" styleName=\"customer-wrapper\">\n\n        <div className={styles.title} title={`CUSTOMER ${id}`}>\n            <span className={styles.titleText}>CUSTOMER <span className={classNames('text-bold',styles.titleNum)}>{id}</span></span>\n        </div>\n    </div>\n)\n\nconst CustomerHeader = CSSModules(CustomerHeaderComp, styles, {allowMultiple: true});\n\n\nclass PageHeaderCustomer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            customerListToggle: false\n        }\n    }\n    render() {\n        let {customerListToggle} = this.state;\n        let {customerListData, customerListMeta, loadCustomersData, loadCustomerData, currentCustomerId, totalCustomers} = this.props;\n        let pagesize = 50;\n        return (\n            <div>\n                <header styleName='header'>\n                    <a styleName='header__logo' className=\"fleft\">\n                        <img src={logoPath} alt=\"logo\"/>\n                    </a>\n\n                    <CustomerHeader\n                        id={this.props.params.customerId}\n                        gotoPage={this.props.goBackTo}\n                        datasetId={this.props.params.datasetId}\n                    />\n                    <h2 styleName='header__title' className=\"fleft text-bold\">\n                        <Link to={this.props.location.query.segmentId? `/datasets/${this.props.params.datasetId}/customers?segmentId=${this.props.location.query.segmentId}&segmentName=${this.props.location.query.segmentName}&page=1`: `/datasets/${this.props.params.datasetId}/segments`}\n                              className=\"back-button flaticon-arrows\"/>\n                        {`BACK TO ${this.props.location.query.segmentId? \"CUSTOMERS\": \"SEGMENTS\"} LIST`}\n                    </h2>\n                </header>\n\n            </div>\n        );\n    }\n}\nconst mapToProps = (state)=> ({ }), dispatcher = (dispatch)=>({\n    onUndo: () => dispatch(UndoActionCreators.undo()),\n    onRedo: () => dispatch(UndoActionCreators.redo()),\n    discardChanges: (data, resetChanges) => {\n        // dispatch(actionSagaLoadSegments(data));\n        resetChanges(0, 0);\n    },\n    saveSegments: (payload, resetChanges)=> {\n        // dispatch(actionUpdateSegmentsSaga(payload));\n        resetChanges(1, 0);\n    },\n    loadCustomersData: (data) => {\n        // dispatch(actionSagaLoadCustomers(data));\n    },\n    loadCustomerData: (data) => {\n        dispatch(actionSagaLoadCustomer(data));\n    },\n    goBackTo: (uri)=> {\n        dispatch(push(uri))\n    }\n});\n\nexport default connect(mapToProps, dispatcher)(CSSModules(PageHeaderCustomer, styles, {allowMultiple: true}));\n","/Users/vikas/Documents/rzt-nbp/src/components/CustomerList/CustomerList.js",["438"],"import * as React from 'react';\nimport CSSModules from 'react-css-modules';\nimport classNames from 'classnames';\nimport styles from './CustomerList.css';\nimport Pagination from './Pagination';\nimport Table from './../Table/Table';\n\n\nconst TickMark = ({done}) => {\n    return (\n        <span className={classNames(styles.evaluationStatus, 'flaticon-check', done ? styles.true : styles.false)}/>)\n};\n/*TODO: move pagination component to another file*/\n\nconst CustomerList = ({\n    totalCustomers, currentCustomerId, records, pagination, loadCustomersData, pagesize, evaluated = true, onClick = () => (0), isVisible,\n    dataset_id,\n    onOverlayClick, onPaginationClick = () => (0)\n}) => {\n    let columns = [\n        // { key: 'evaluated', title: 'Evaluated', width: '75px' },\n        {key: 'id', title: 'Customer', width: '100px'},\n        {key: 'Customer Current Age', title: 'Age', width: '60px'},\n        {key: 'Location', title: 'Location', width: 'auto'},\n        {key: 'Segment', title: 'Segment', width: 'auto'},\n        // {key: 'numberOfAccs', title: '#Accounts', width: '100px'},\n        // { key: 'propensity', title: 'Propensity', width: '120px' }\n    ];\n\nconsole.log(\"pagination\", dataset_id)\n    return (\n        <div className={classNames(isVisible ? styles.dropdownVisible : '', styles.dropdown)}>\n            <div className={styles.listOverlay} onClick={onOverlayClick}></div>\n            <div className={styles.list}>\n                <Table\n                    records={records}\n                    columns={columns}\n                    id={'id'}\n                    onClick={onClick}\n                    className=\"headerList\"\n                    isVisible={true}\n                />\n                <Pagination currentCustomerId={currentCustomerId}\n                            totalCustomers={totalCustomers}\n                            dataset_id={dataset_id}\n                            data={pagination}\n                            pagesize={pagesize}\n                            loadCustomersData={loadCustomersData}\n                            onclick={onPaginationClick}/>\n            </div>\n        </div>\n    )\n};\n\nexport default CSSModules(CustomerList, styles, {allowMultiple: true});","/Users/vikas/Documents/rzt-nbp/src/components/CustomerList/Pagination.js",[],"/Users/vikas/Documents/rzt-nbp/src/components/DownloadCustomers/DownloadCustomers.js",["439","440","441","442"],"import * as React from 'react';\nimport CSSModules from 'react-css-modules';\nimport styles from './DownloadCustomers.css';\nimport classNames from 'classnames';\n\nconst compareTwoStrings = (a = \"\", b = \"\") => a.toLowerCase().includes(b.toLowerCase());\n\nexport default class DownloadSegmentsPopup extends React.Component {\n    static defaultProps = {\n        segments: [],\n        deciles: Array(10).fill(1).map((item, index) => ({id: item + index, name: \"Decile\" + (item + index)}))\n    }\n\n    constructor(props, context) {\n        super(props, context)\n        this.state = {\n            searchText: '',\n            selectedSegmentId: null,\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    componentWillMount() {\n        window.addEventListener('click', this.handleClick);\n    }\n\n    componentWillUnmount() {\n        // remember to remove all events to avoid memory leaks\n        window.removeEventListener('click', this.handleClick);\n    }\n\n    handleClick(event) {\n        const {close} = this.props; // get click outside callback\n        const {target} = event; // get direct click event target\n        if (target !== this.wrapper && !this.wrapper.contains(target)) {\n            close && close()\n        }\n    }\n\n    searchFocus() {\n        this.inputField.focus();\n    }\n\n    render() {\n        let {segments, deciles, close, dataset_id} = this.props;\n        return <div styleName=\"DownloadCustomersPopup\"\n                    ref={node => {\n                        this.wrapper = node;\n                    }}\n                    onClick={(event) => {\n                        event.stopPropagation();\n                        console.log(event);\n                    }}>\n            <div styleName=\"searchContainer\">\n                <span className={classNames('flaticon-search', 'fleft')} styleName=\"searchIcon\"\n                      onClick={() => this.searchFocus()}/>\n                <input styleName=\"search\"\n                       className=\"fleft\"\n                       ref={(input) => this.inputField = input} type=\"text\"\n                       placeholder=\"Select segment\"\n                       onChange={() => {\n                           this.setState({ selectedSegmentId: null, searchText: this.inputField.value});\n                       }}/>\n                <span className={ classNames(this.state.searchText ? '' : 'hide', 'flaticon-close')}\n                      styleName=\"closeIcon\" onClick={() => {\n                    this.inputField.value = '';\n                    this.setState({searchText: ''})\n                }}/>\n            </div>\n\n            <div styleName={`ListsContainer ${this.state.selectedSegmentId != null ? 'biView' : ''}`} >\n                <ul styleName=\"segmentList\">\n                    {/*<li styleName=\"segmentListItem\" className={styles.active}>Segment1</li>*/}\n                    {segments && segments\n                        .filter(({name}) => !this.state.searchText || compareTwoStrings(name, this.state.searchText))\n                        .map(({id, name}) => (\n                            <li key={id}\n                                styleName=\"segmentListItem\"\n                                className={classNames({[styles.active]: this.state.selectedSegmentId == id}, 'text-overflow-ellipsis')}\n                                onClick={() => this.setState({selectedSegmentId: id})}\n                                title={name}\n                            >{name}</li>\n                        ))}\n                    <li key={'default-all'}\n                        styleName=\"segmentListItem\"\n                        className={classNames({[styles.active]: this.state.selectedSegmentId == 0}, 'text-overflow-ellipsis',{['hide']:this.state.searchText && !compareTwoStrings('all', this.state.searchText)})}\n                        onClick={() => this.setState({selectedSegmentId: 0})}\n                    > ALL\n                    </li>\n                </ul>\n                {this.state.selectedSegmentId != null && <ul styleName=\"decileList\">\n                    {deciles.map(({id, name}) => (\n                        <li className=\"text-overflow-ellipsis\"\n                            key={id}\n                            styleName=\"decileListItem\"\n                            title={name}\n                            onClick={() => {\n                                window.open(`${window.location.origin}/rest/datasets/${dataset_id}/download?segmentId=${this.state.selectedSegmentId}&decileId=${id}`);\n                                close && close();\n                            }}>\n                            <span styleName=\"decileListItemText\" className=\"flaticon-download\"> {name} </span>\n                        </li>\n                    ))}\n                </ul>}\n            </div>\n        </div>\n\n    }\n}\n\n","/Users/vikas/Documents/rzt-nbp/src/components/DownloadFile/DownloadFile.js",[],"/Users/vikas/Documents/rzt-nbp/src/components/DropDown/DropDown.js",["443","444"],"import React from 'react';\nimport CSSModules from 'react-css-modules';\nimport styles from './DropDown.css';\nimport classNames from 'classnames';\n\n\nconst DropDownListComp = ({size, options, onClick, setSelectedText, selectedOption, displayValue, uKey}) => (\n    <ul size={size} styleName=\"options__list\">\n        { options.map(\n            (option, index) => {\n                return <li\n                    title={ option[displayValue] }\n                    styleName={ classNames('options__list__item', (selectedOption && option[uKey] == selectedOption) ? 'active' : '') }\n                    className=\"text-overflow-ellipsis\"\n                    onClick={ () => {\n                        onClick(option);\n                        setSelectedText(option)\n                    } }\n                    key={ index }>\n                    { option[displayValue] }\n                </li>\n            }\n        )\n        }\n    </ul>\n);\n\nconst DropDownList = CSSModules(DropDownListComp, styles, {allowMultiple: true});\n\n\nclass DropDown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            opened: false,\n            selectedText: ''\n        };\n        this.placeholder = '';\n        // this.options = [];\n        this.setSelection = this.setSelection.bind(this);\n        this.onclickListener = this.onclickListener.bind(this);\n    }\n\n    toggle = (event) => {\n        event.stopPropagation();\n        this.setState({\n            opened: !this.state.opened\n        });\n    }\n\n    onclickListener(event) {\n        if (this.state.opened)\n            this.toggle(event);\n    }\n\n    setSelection = (text) => {\n        this.setState({\n            selectedText: text\n        })\n    };\n\n    componentDidMount() {\n        this.placeholder = this.props.placeholder;\n        if (!this.props.selectedOption) {\n            this.setSelection(this.props.options[0][this.props.displayValue]);\n        }\n        window.addEventListener('click', this.onclickListener);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('click', this.onclickListener);\n    }\n\n    render() {\n        let {opened} = this.state;\n        let {\n            options, onClick, wrapperClass, globalClass, sortable, toggleSort, headStyle,\n            OptionsTitle, placeholder, selectedOption, displayValue, uKey\n        } = this.props;\n\n        let displayText = selectedOption ? options.find(item => item[uKey] == selectedOption)[displayValue] : placeholder;\n        return (\n            <div styleName=\"wrapper\"\n                 className={`${globalClass && globalClass} ${wrapperClass && wrapperClass}`}>\n                <div styleName={classNames('head', (sortable) ? 'sortable' : '')}\n                     className={classNames(\"clearfix\", headStyle)}>\n                    <span styleName=\"head__title\" className={\"text-overflow-ellipsis fleft\"}\n                          onClick={ event => this.toggle(event) } title={displayText}>{ displayText }</span>\n                    { sortable && selectedOption && <span className={classNames('flaticon-sort', 'fleft')}\n                                                          styleName={'sort-ico'} title=\"Sort\"\n                                                          onClick={ (e) => {\n                                                              e.stopPropagation();\n                                                              toggleSort();\n                                                          }}/> }\n                </div>\n                { opened && <div styleName=\"options\">\n                    <div styleName=\"options__header\">\n                        <span styleName=\"options__header__title\">SELECT {OptionsTitle && OptionsTitle}</span>\n                    </div>\n                    <DropDownList size={3}\n                                  options={options}\n                                  onClick={onClick}\n                                  uKey={uKey}\n                                  setSelectedText={this.setSelection}\n                                  selectedOption={selectedOption}\n                                  displayValue={displayValue}/>\n                </div>}\n            </div>\n        )\n    }\n}\nexport default CSSModules(DropDown, styles, {allowMultiple: true});","/Users/vikas/Documents/rzt-nbp/src/components/Pagination/Pagination.js",["445","446","447","448","449"],"import * as React from 'react';\nimport classNames from 'classnames';\nimport styles from './Pagination.css';\nimport _ from 'underscore';\n\nexport default class Pagination extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentPage: !this.props.currentCustomerId ? this.props.pageNo : 1\n        }\n    }\n\n    componentWillReceiveProps (nextProps){\n        if(this.props.currentCustomerId !== nextProps.currentCustomerId || this.props.pageNo !== nextProps.pageNo) {\n            this.setState({currentPage: _.get(nextProps, [\"pageNo\"], Math.ceil((nextProps.currentCustomerId || 1)/nextProps.pagesize))});\n        }\n    }\n\n    render() {\n        let {totalCount, loadPageData, group_id, pagesize, page} = this.props;\n        let {currentPage} = this.state;\n        let totalRecords = totalCount,\n            totalPages = Math.ceil(totalRecords / pagesize),\n            totalIndexButtons = totalPages,\n            totalVisibleButtons = totalIndexButtons,\n            buttonIndex = 0,\n            buttonLimit = 9,\n            indexButtons = [];\n\n\n        let self = this;\n        if (totalIndexButtons > buttonLimit) {\n            totalVisibleButtons = buttonLimit;\n\n            if (currentPage > (buttonLimit/2)) {\n                buttonIndex = currentPage - Math.ceil((buttonLimit/2));\n                totalVisibleButtons = buttonIndex + buttonLimit;\n\n            }\n            if(currentPage > (buttonLimit/2) && currentPage >= (totalPages - (buttonLimit/2))) {\n                buttonIndex = totalPages - buttonLimit;\n                totalVisibleButtons = totalPages;\n            }\n\n        }\n\n        totalVisibleButtons = !totalVisibleButtons ? 1 : '';\n\n        for (let i = buttonIndex; i < totalVisibleButtons; i++) {\n            indexButtons.push(<li key={i + 1} className={(Number(currentPage||0) === i + 1) ? styles.active : ''}\n                                  onClick={() => {\n\n                                      page == 'customers' ?\n                                      loadPageData({segmentid: group_id, pageno: (i + 1), pagesize}) :\n                                      loadPageData({group_id, pageno: (i + 1), pagesize});\n\n                                      self.setState({currentPage:  i + 1});\n                                  }}>{i + 1}</li>);\n        }\n\n        return <div className={styles.wrapper}>\n            <div className={styles.paginationWrap}>\n            <span className={classNames(styles.prev, styles.jump, \"fleft\")}\n                  onClick={() => {\n                      this.setState({ currentPage: 0 })\n                      loadPageData({\n                          [page == 'customers' ? 'segmentid': 'group_id']: group_id,\n                          pageno: 1,\n                          pagesize\n                      });\n                  }}/>\n            <span className={classNames(styles.prev, \"fleft\")}\n                  onClick={() => {\n                      ((currentPage > 1 ) ? this.setState({currentPage: currentPage -= 1}) : this.setState({currentPage: 1}));\n\n                      page == 'customers' ?\n                      loadPageData({segmentid: group_id, pageno: ((currentPage > 1 ) ? currentPage : 1), pagesize}) :\n                      loadPageData({group_id, pageno: ((currentPage > 1 ) ? currentPage : 1), pagesize});\n                  }}/>\n            <ul className={classNames(styles.pageination, 'fleft')}>\n                {indexButtons}\n            </ul>\n            <span className={classNames(styles.next, \"fleft\")}\n                  onClick={() => {\n                      ((currentPage < totalIndexButtons ) ? this.setState({currentPage: currentPage += 1}) : this.setState({currentPage: totalIndexButtons}));\n\n                      page == 'customers' ?\n                      loadPageData({segmentid: group_id, pageno: ((currentPage < totalIndexButtons ) ? currentPage : totalIndexButtons), pagesize}) :\n                      loadPageData({group_id, pageno: ((currentPage < totalIndexButtons ) ? currentPage : totalIndexButtons), pagesize});\n                  }}/>\n            <span className={classNames(styles.next, styles.jump, \"fleft\")}\n                  onClick={() => {\n                      this.setState({ currentPage: totalIndexButtons });\n                      loadPageData({\n                          [page == 'customers' ? 'segmentid': 'group_id']: group_id,\n                          pageno: totalIndexButtons,\n                          pagesize\n                      });\n                  }}/>\n            </div>\n        </div>\n    }\n}\n","/Users/vikas/Documents/rzt-nbp/src/containers/CustomerList/CustomerList.js",["450","451","452"],"import * as React from 'react';\nimport CSSModules from 'react-css-modules';\nimport classnames from 'classnames';\nimport _ from 'lodash';\n\nimport TransitionGroup from 'react-addons-transition-group';\nimport styles from './../../components/Dataset/Dataset.css';\nimport DatasetHead from './../../components/Dataset/DatasetHead';\nimport * as d3 from 'd3';\nimport {nFormatter} from '../../utils';\n\nconst getFieldColor = ( record ) => {\n    let length = 10;\n    let color = d3.scaleLinear().domain([0,length/2, length])\n        .range([d3.rgb(\"#d12f2f\"), d3.rgb('#FFC107'), d3.rgb('#21e1ad')])\n        .interpolate(d3.interpolateHcl);\n    let range = {\n        HIGH: 100,\n        LOW: 0,\n        MEDIUM: 50\n    }\n    let colors = {\n        'AFFLUENCE' : record.affluent && color(record.affluent/ length),\n        'EVENT' : record.event_propensity && color(record.event_propensity * 100/ length) ,\n        'PROFILE' : color((range[(record.segment_propensity || '').toUpperCase()] || 0) / length),\n        // 'LIFECYCLE' : record.lifecycle_propensity && record.lifecycle_propensity * 100 < 0 ? \"#d12f2f\" : '#21e1ad',\n        // 'OVERALL' : record.overall_propensity && color(record.overall_propensity * 100/ length)\n    }\n    return colors;\n}\n\nexport default class CustomerList extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    getHeadFields = (record) => {\n        return [\n            { title: \"CUSTOMER ID\", styles: {flex: \"0 0 180px\"}, value: record.id },\n            { title: \"AGE\", styles: {}, value: record.age != null? record.age : '--'},\n            { title: \"AFFLUENCE\", styles: {}, value: record.affluence && record.affluence !==null ? (Math.round(record.affluence)) : '--'},\n            { title: \"PROFILE\", tooltip: record.hasLI? 'Has Insurance': \"Doesn't have a insurance\", iconClass: record.hasLI ? 'flaticon-checked': 'flaticon-cancel', styles: {}, value: record.segment_propensity && record.segment_propensity !== null ? (record.segment_propensity): '--'},\n            // { title: \"LIFECYCLE\", styles: {}, value: record.lifecycle_propensity && record.lifecycle_propensity !== null ? (record.lifecycle_propensity* 100).toFixed(2) + ' %' : '--'},\n            { title: \"EVENT\", styles: {}, value: record.event_propensity && record.event_propensity !== null ? nFormatter(record.event_propensity * 100, 2) + ' %' : '--'},\n            // { title: \"OVERALL\", styles: {flex: \"0 0 150px\"}, value: record.overall_propensity && record.overall_propensity !== null ? (record.overall_propensity* 100).toFixed(2) + ' %' : '--'}\n        ];\n    };\n\n    render() {\n\n        let {records, sortBy, sortOrder, page} = this.props;\n        records = sortOrder == 'Ascending' ? _.sortBy(records, sortBy || 'name') :  _.sortBy(records, sortBy || 'name').reverse();\n\n        return (\n            <TransitionGroup>\n                <ul styleName=\"list propensity-list\" ref=\"list\">\n                    {\n                        records.map((record, i) => (\n                            <li styleName=\"list__item\"\n                                key={`index${i}listItem${record.dataset_id}`}\n                                onClick={()=>{this.props.onClick(record)}}\n                                className={classnames({[styles.expanded]: (record.toggle)})}>\n                                <DatasetHead fields={this.getHeadFields(record)}\n                                             id={record.dataset_id}\n                                             page={page}\n                                             togglePopup={this.props.togglePopup}\n                                             getFieldColor={ getFieldColor(record) }\n                                />\n                            </li>\n                        ))\n                    }\n                </ul>\n            </TransitionGroup>\n        );\n\n    }\n}\n","/Users/vikas/Documents/rzt-nbp/src/containers/AnalyseSegments/AnalyseSegments.js",["453","454"],"import * as React from 'react';\nimport CSSModules from 'react-css-modules';\nimport TransitionGroup from 'react-addons-transition-group';\nimport Dataset from './../../components/Dataset/Dataset';\nimport TransactionListDetails from './../TransactionListDetails/TransactionListDetails';\nimport * as d3 from 'd3';\nimport {nFormatter} from '../../utils';\n// const headTitle = ['SEGMENT ID', 'SEGMENT NAME', 'AVG AGE', 'AFFLUENCE', 'SEGMENTS', 'EVENT', 'LIFECYCLE', 'OVERALL'];\n\nconst getFieldColor = ( record ) => {\n    let length = 10;\n    let color = d3.scaleLinear().domain([0,length/2, length])\n        .range([d3.rgb(\"#ff6b6b\"), d3.rgb('#fcb54d'), d3.rgb('#72cc71')])\n        .interpolate(d3.interpolateHcl);\n    // .range([d3.rgb(\"#d12f2f\"), d3.rgb('#FFC107'), d3.rgb('#21e1ad')])\n    let range = {\n        HIGH: 100,\n        LOW: 0,\n        MEDIUM: 50\n    }\n    let colors = {\n        'AFFLUENCE' : color(record.affluence / length),\n        'PROFILE' : color((range[(record.segment_propensity|| '').toUpperCase()] || 0) / length),\n        'EVENT' : color((record.event_propensity * 100) / length),\n        // 'LIFECYCLE' : (record.lifecycle_propensity * 100) < 0 ? \"#d12f2f\" : '#21e1ad' ,\n        // 'OVERALL' : color((record.overall_propensity * 100) / length),\n    }\n    return colors;\n}\n\nconst getHeadFields =  ( record ) => {\n    return [\n        { title: \"SEGMENT ID\", iconClass: '', styles: { width: \"auto\" }, value: record.id },\n        { title: \"SEGMENT NAME\", iconClass: '', styles: { width: \"200px\" }, value: record && record.name !== null ? (record.name) : '--' },\n        { title: \"AVG AGE\", iconClass: '', styles: { width: \"auto\" }, value: record && record.age !== null ? (Math.round(record.age)) : '--' },\n        { title: \"AFFLUENCE\", iconClass: '', styles: { width: \"auto\" }, value: record && record.affluence !== null ? (Math.round(record.affluence)) : '--' },\n        { title: \"PROFILE\", iconClass : '' , styles: { width: \"120px\" }, value: record && record.segment_propensity !== null ? (record.segment_propensity) : '--' },\n        // { title: \"LIFECYCLE\", iconClass:'', styles: { width: \"120px\" }, value: record && record.lifecycle_propensity !== null ? (`${(record.lifecycle_propensity * 100).toFixed(2)} %`) : '--' },\n        { title: \"EVENT\", iconClass: '', styles: { width: \"120px\" }, value: record && record.event_propensity !== null ? (`${nFormatter(record.event_propensity * 100, 2)} %`) : '--' },\n        // { title: \"OVERALL\", styles: { width: \"95px\" }, value: record && record.overall_propensity !== null ? (`${(record.overall_propensity * 100).toFixed(2)} %`) : '--' },\n    ]\n}\n\nexport default class AnalyseSegments extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let {records, gotoSegment, parent, datasetId, locationQuery } = this.props;\n        return (\n            <TransitionGroup>\n                <Dataset\n                    records={ records }\n                    datasetId={datasetId}\n                    page={ \"analyse\" }\n                    locationQuery={locationQuery}\n                    gotoSegment={ gotoSegment }\n                    getHeadFields={ getHeadFields }\n                    bodyContent={ TransactionListDetails }\n                    deletable={ false }\n                    parent = { parent }\n                    getFieldColor={ getFieldColor }\n                    propensityList = { true }\n                />\n            </TransitionGroup>\n        );\n\n    }\n}\n\n\n","/Users/vikas/Documents/rzt-nbp/src/containers/DatasetList/DatasetList.js",["455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472","473","474"],"import * as React from 'react';\nimport _ from 'lodash';\n\nimport TransitionGroup from 'react-addons-transition-group';\nimport {dateformatter} from '../../utils/formatter';\nimport CSSModules from 'react-css-modules';\nimport Button from './../../components/Button/Button';\nimport Dataset from './../../components/Dataset/Dataset';\nimport SegmentedBody from './SegmentedBody';\nimport styles from './DatasetList.css';\nimport DatasetChart from './../../containers/DatasetChart/DatasetChart';\nimport DatasetBarGraph from './../../containers/DatasetBarGraph/DatasetBarGraph';\n\nconst moment = require('moment');\n\nconst getDurationEntities = (duration) => {\n    let time = Number(duration);\n    var minutes = Math.floor(time % 3600 / 60)\n    var hours = Math.floor(time / 3600);\n    var seconds = Math.floor(duration % 3600 % 60);\n    return {hours, minutes, seconds};\n}\n\nconst getDurationFromSeconds = (duration) => {\n    if (!duration) return '--';\n    let {hours, minutes, seconds} = getDurationEntities(duration);\n\n    return `${_.padStart(hours, 2, \"0\")}:${_.padStart(minutes, 2, \"0\")}:${_.padStart(seconds.toFixed(0), 2, \"0\")}`\n}\nconst geteEtaFromSeconds = (duration) => {\n    if (!duration) return '--';\n    let {hours, minutes, seconds} = getDurationEntities(duration);\n    return `${_.padStart(hours, 2, \"0\")}h ${_.padStart(minutes, 2, \"0\")}m ${seconds ? _.padStart(seconds.toFixed(0), 2, \"0\") : ''}`;\n}\n\nconst nFormatter = function (num = 0, digits) {\n    var si = [\n        {value: 1E18, symbol: \"E\"},\n        {value: 1E15, symbol: \"P\"},\n        {value: 1E12, symbol: \"T\"},\n        {value: 1E9, symbol: \"G\"},\n        {value: 1E6, symbol: \"M\"},\n        {value: 1E3, symbol: \"K\"}\n    ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/, i;\n    for (i = 0; i < si.length; i++) {\n        if (num >= si[i].value) {\n            return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n        }\n    }\n    return (num || 0).toFixed(digits).replace(rx, \"$1\");\n}\n\nconst DatasetBodyComp = ({gotoSegment, id, type, fields, changeAction}) => {\n    let charts = fields.charts;\n    if (charts) {\n        var giniChart = charts.find(chart => chart.name == 'GINI CHART');\n        var rankingChart = charts.find(chart => chart.name == 'RANKING CHART');\n    }\n    fields = fields.meta;\n    var completed_at = `${fields.completed_at ? moment(fields.completed_at).format(\"DD MMM YYYY, hh:mm a\") : ''}`;\n    var duration = getDurationFromSeconds(fields.duration);\n    var eta = geteEtaFromSeconds(fields.eta);\n    return (\n        <div styleName=\"wrapper\">\n            {fields.msg_id == 'UPLOADED' && <ul>\n                <li styleName=\"status-list__item grid-1\">\n                    <h4 styleName=\"body__title\">\n                        Please wait while data is in queue for processing.\n                        <br />\n                    </h4>\n                </li>\n            </ul>}\n            { <h4 styleName=\"body__title\">{fields.message}</h4>}\n            { (fields.msg_id == 'PROCESSING_ERROR') && <ul styleName=\"status-list\">\n                <li styleName=\"status-list__item grid-4 button-grp\">\n                    <Button className={{local: 'status-list__action-button'}}\n                            text={'RERUN'}\n                            onClick={() => {\n                                changeAction({type: \"rerun\", dataset_id: id})\n                            }}/>\n                </li>\n            </ul>\n            }\n            { (fields.msg_id == 'PREPARE') && <ul styleName=\"status-list\">\n                <li styleName=\"status-list__item grid-4 button-grp\">\n                    <Button className={{local: 'status-list__action-button'}}\n                            text={fields.msg_id}\n                            onClick={() => {\n                                changeAction({type: (fields.msg_id || '').toLowerCase(), dataset_id: id})\n                            }}/>\n                </li>\n            </ul>\n            }\n            { (fields.msg_id == 'SEGMENT' || fields.msg_id == 'PREPARED') && <ul styleName=\"status-list\">\n                <li styleName=\"status-list__item grid-4 button-grp\">\n                    <Button className={{local: 'status-list__action-button'}}\n                            text={'SEGMENT'}\n                            onClick={() => {\n                                changeAction({type: ('SEGMENT').toLowerCase(), dataset_id: id})\n                            }}/>\n                </li>\n            </ul>\n            }\n            { false && fields.msg_id == 'PREPARING' &&\n            <div styleName=\"status-wrapper\">\n                <ul styleName=\"status-list\">\n                    <li styleName=\"status-list__item grid-1\" className=\"vert-center\">\n                        <div styleName=\"status-list__text status-ready\">\n                            <div styleName=\"in-col-1\">\n                                <div styleName=\"status-list__text__sub-title\" style={{minHeight: '50px'}}>{fields.message}</div>\n                            </div>\n\n                        </div>\n                        <div styleName=\"status-list__secondary-text\" style={{marginTop: '15px'}}>\n                            <div className=\"disp-block\">Duration: {duration || '--'} | ETA: {eta || '--'}</div>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            }\n            { (fields.msg_id == 'PREPARING' || fields.msg_id == 'SEGMENTING' || fields.msg_id == 'TRAINING' || fields.msg_id == 'DEPLOYING') &&\n            <div styleName=\"status-wrapper\">\n                <ul styleName=\"status-list\">\n                    <li styleName=\"status-list__item grid-4 progress\">\n                        <div styleName=\"status-list__text status-ready\">\n                            <span styleName=\"status-list__text__title\">{fields.progress || 0}%</span>\n                            <div styleName=\"in-col-2\">\n                                <div styleName=\"status-list__text__sub-title\">\n                                    IN PROGRESS\n                                    <br/>\n                                    <div styleName=\"status-list__secondary-text\">\n                                        Duration: {duration || '--'} <br/> ETA: {eta || '--'}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n\n                    {/*fields.msg_id !== 'DEPLOYING' && <li styleName=\"status-list__item action-col grid-4 button-grp\">\n                     <Button className={{local: 'status-list__action-button'}}\n                     onClick={()=> {\n                     changeAction({type: 'abort', id: id})\n                     }}>\n                     <span>ABORT</span>\n                     </Button>\n                     </li>*/}\n\n                </ul>\n            </div>\n            }\n            { (fields.msg_id == 'SEGMENTED' || fields.msg_id == 'DEPLOYED_TO_PRODUCTION') &&\n            <SegmentedBody fields={fields} completedAt={completed_at} duration={duration} eta={eta} charts={charts}\n                           giniChart={giniChart} rankingChart={rankingChart} gotoSegment={gotoSegment}\n                           changeAction={changeAction} type={type} id={id}/> }\n\n            { (fields.msg_id == 'TRAINED' || fields.msg_id == 'SEGMENT_MODIFIED') && <ul styleName=\"status-list\">\n                <li styleName=\"status-list__item grid-4\">\n                    <div\n                        styleName={`status-list__text ${fields.msg_id == 'SEGMENTS-MODIFIED' ? 'status-error' : 'status-ready'}`}>\n                        <span styleName=\"status-list__text__title\">{nFormatter(fields.segments, 1) || 0}</span>\n                        <span styleName=\"status-list__text__sub-title\">SEGMENTS <br/>DERIVED</span>\n                    </div>\n                    <h5 styleName=\"status-list__secondary-text\">\n                        Completed at: {completed_at || '--'} <br />\n                        Duration: {duration || '--'}</h5>\n                </li>\n                {!!fields.gini && <li styleName=\"status-list__item grid-4\">\n                    <div\n                        styleName={`status-list__text ${fields.msg_id == 'SEGMENTS-MODIFIED' ? 'status-error' : 'status-ready'}`}>\n                        <span styleName=\"status-list__text__title\">{fields.gini}</span>\n                        <span styleName=\"status-list__text__sub-title\">GINI SCORE</span>\n                    </div>\n                </li>}\n                { !!fields.error && <li styleName=\"status-list__item grid-4\">\n                    <div\n                        styleName={`status-list__text ${fields.msg_id == 'SEGMENTS-MODIFIED' ? 'status-error' : 'status-ready'}`}>\n                        <span styleName=\"status-list__text__title\">{fields.error}</span>\n                        <span styleName=\"status-list__text__sub-title\">% ERROR</span>\n                    </div>\n                </li>}\n                <li styleName=\"status-list__item action-col grid-4 button-grp three-button-list\">\n                    <Button className={{local: 'status-list__action-button'}}\n                            onClick={() => {\n                                gotoSegment(`/datasets/${id}/segments`)\n                            }}>\n                        <span>VIEW SEGMENTS</span>\n                    </Button>\n                    <Button className={{local: 'status-list__action-button'}}\n                            text=\"RETRAIN\"\n                            onClick={() => {\n                                changeAction({type: 'train', dataset_id: id})\n                            }}/>\n                    <Button className={{local: 'status-list__action-button'}}\n                            text=\"DEPLOY TO PRODUCTION\"\n                            onClick={() => {\n                                changeAction({type: 'deploy_to_production', dataset_id: id})\n                            }}/>\n                </li>\n            </ul>}\n            { charts && <div styleName=\"graph-wrapper\">\n                <div styleName=\"graph\" className=\"clearfix\">\n                    { giniChart && giniChart.value.length > 0 && <div styleName=\"graph-container\">\n                        <DatasetChart data={giniChart}/>\n                    </div> }\n                    { rankingChart && rankingChart.value.length > 0 && <div styleName={`graph-container bar`}>\n                        <DatasetBarGraph data={rankingChart}/>\n                    </div> }\n                </div>\n            </div> }\n        </div>)\n}\n\nconst DatasetBody = CSSModules(DatasetBodyComp, styles, {allowMultiple: true});\n\nclass DatasetList extends React.Component {\n    static propTypes = {records: React.PropTypes.array};\n    static defaultProps = {records: []}\n\n    constructor(props) {\n        super(props);\n    }\n\n    getHeadFields = (record) => ([\n        {title: \"FILENAME\", value: record.fileName},\n        {title: \"SIZE\", value: record.sizeInMB ? record.sizeInMB.toFixed(2) + ' MB' : ''},\n        {title: \"UPLOADED ON\", value: dateformatter(record.uploaded_on)},\n        {title: \"STATUS\", value: record.status.state}\n    ]);\n\n    render() {\n        let {records, gotoSegment, changeAction, deleteAction, togglePopup} = this.props;\n        return (\n            <TransitionGroup>\n                <Dataset records={ records }\n                         togglePopup={togglePopup}\n                         gotoSegment={ gotoSegment }\n                         changeAction={ changeAction }\n                         deleteAction={ deleteAction }\n                         getHeadFields={ this.getHeadFields }\n                         bodyContent={ DatasetBody }\n                         getFieldColor={ () => ({}) }\n                         page={ \"dataset\" }/>\n\n            </TransitionGroup>\n        );\n    }\n}\n\n\n\nexport default DatasetList;\n","/Users/vikas/Documents/rzt-nbp/src/components/Dataset/Dataset.js",["475","476","477","478","479","480","481","482","483","484","485","486","487","488"],"import * as React from \"react\";\nimport CSSModules from 'react-css-modules';\nimport ReactDOM from 'react-dom';\nimport {Link} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport styles from './Dataset.css';\nimport classnames from 'classnames';\nimport {dateformatter} from '../../utils/formatter';\nimport Button from './../../components/Button/Button'\nimport TransitionGroup from 'react-addons-transition-group';\nimport {TweenMax, TimelineMax, Power3} from 'gsap';\nimport DatasetHead from './DatasetHead';\nimport {actionTogglePopup} from './../../pages/Global/Global.actions';\nimport {actionDeleteDatasets} from './../../pages/Datasets/Datasets.actions';\nconst moment = require('moment');\n\nlet toggleListbodyAnimation;\n\nclass DatasetBody extends React.Component {\n\n    componentWillEnter(callback) {\n        const el = ReactDOM.findDOMNode(this);\n        let childElement = el.childNodes;\n        toggleListbodyAnimation = new TimelineMax();\n\n        toggleListbodyAnimation\n            .from(\n                el,\n                0.25,\n                {\n                    height: 0,\n                    ease: Power3.ease\n                }\n            )\n            .from(\n                childElement,\n                0.15,\n                {\n                    scale: 0.85,\n                    autoAlpha: 0,\n                    ease: Power3.easeIn,\n                    onComplete: callback\n                },\n                0.2\n            )\n    }\n\n    componentWillLeave(callback) {\n        const el = ReactDOM.findDOMNode(this);\n        let childElement = el.childNodes;\n        toggleListbodyAnimation = new TimelineMax();\n\n        toggleListbodyAnimation\n            .to(\n                childElement,\n                0.15,\n                {\n                    scale: 0.7,\n                    autoAlpha: 0,\n                    ease: Power3.easeOut\n                }\n            )\n            .to(\n                el,\n                0.25,\n                {\n                    height: 0,\n                    ease: Power3.easeOut,\n                    onComplete: callback\n                },\n            )\n    }\n\n    render() {\n        let {fields, id, type, datasetId, gotoSegment, changeAction, bodyContent, page, parent, records, locationQuery} = this.props;\n        const BodyContent = bodyContent;\n        let isChartsPresent = fields.charts && fields.charts.some( chart => chart.value.length > 0);\n        return <div styleName=\"body\"\n                    style={ page == \"analyse\" ? {height: 'auto'} : isChartsPresent ? {height: '450px'} : {height: '200px'} }>\n            { fields && <BodyContent gotoSegment={ gotoSegment }\n                                     locationQuery={ locationQuery }\n                                     id={ id }\n                                     type={ type }\n                                     fields={ fields }\n                                     datasetId={datasetId}\n                                     changeAction={ changeAction }\n                                     parent={ parent }\n                                     records={ records }/> }\n        </div>\n    }\n}\n;\n\nclass Dataset extends React.Component {\n    static propTypes = {records: React.PropTypes.array};\n    static defaultProps = {records: []};\n\n    constructor(props) {\n        super(props);\n        this.state = {}\n    }\n\n\n    render() {\n        let {\n            datasetId, records, gotoSegment, changeAction, deleteAction, page,\n            bodyContent, deletable, parent, locationQuery, propensityList, getFieldColor, getHeadFields\n        } = this.props;\n\n        console.log('Rendering Dataset...');\n        return <ul styleName={`list ${ propensityList ? 'propensity-list' : '' }`}\n                   style={ parent ? {} : {width: '100%'} } ref=\"list\">\n            {\n                records.map((record, i) => (\n                    <li styleName=\"list__item\"\n                        key={`index${i}listItem${record.dataset_id}`}\n                        onClick={this.props.onClick}\n                    >\n                        <DatasetHead fields={ getHeadFields && getHeadFields(record) }\n                                     level={ record.level }\n                                     name={ record.name }\n                                     id={ record.id || record.dataset_id }\n                                     datasetId={datasetId}\n                                     type={record.type}\n                                     locationQuery={locationQuery}\n                                     deleteAction={ deleteAction }\n                                     togglePopup={ this.props.togglePopup }\n                                     deletable={ deletable }\n                                     page={ page }\n                                     parent={ parent }\n                                     getFieldColor={getFieldColor(record)}\n                                     gotoSegment={ gotoSegment }\n                                     onClick={() => {\n                                         record.toggle = !record.toggle;\n                                         this.setState({toggle: true});\n                                     }}\n                        />\n                        <TransitionGroup component=\"div\">\n                            {  page != 'customers' && record.toggle &&\n                            <DatasetBody gotoSegment={gotoSegment}\n                                         id={ record.dataset_id || record.id }\n                                         datasetId={datasetId}\n                                         fields={ page == \"analyse\" ? record : {\n                                                 meta: record.status.meta,\n                                                 charts: record.charts\n                                             } }\n                                         changeAction={ changeAction }\n                                         bodyContent={ bodyContent }\n                                         type={record.type}\n                                         locationQuery={ locationQuery }\n                                         page={ page }\n                                         parent={ parent }\n                                         records={ record.segment }/> }\n                        </TransitionGroup>\n                    </li>\n                ))\n            }\n        </ul>\n    }\n}\n;\n\nconst dispatcher = (dispatch) => ({\n    togglePopup: (data) => {\n        dispatch(actionTogglePopup(data));\n    },\n});\n\nexport default Dataset;\n","/Users/vikas/Documents/rzt-nbp/src/components/Dataset/DatasetHead.js",["489","490","491","492","493","494","495"],"import * as React from \"react\";\nimport CSSModules from 'react-css-modules';\nimport styles from './Dataset.css';\nimport Button from './../../components/Button/Button'\nimport {TweenMax} from 'gsap';\nimport classNames from 'classnames';\nimport Tooltip from './../../components/Tooltip/Tooltip';\n\nclass DatasetHeadField extends  React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            tooltip: false\n        }\n    }\n\n    toggleTooltip = (action) => {\n        this.setState({\n            tooltip : action\n        })\n    }\n\n    render(){\n        let { field, getFieldColor } = this.props;\n        let { tooltip } = this.state;\n        return (<li styleName=\"title-list__item\" style={field.styles}>\n            <span styleName=\"title-list__title\">{field.title} { field.iconClass && <span className={classNames(\"tooltip\", \"onleft\")} styleName=\"headLabel\" data-tooltip={field.tooltip}><span className={field.iconClass} styleName=\"headLabelIcon\"></span></span> }</span>\n            <span styleName=\"title-list__sub-title\" title={field.value} onMouseOver={ () => this.toggleTooltip(true) }\n                  onMouseOut={ () => this.toggleTooltip(false) }\n                  style={ getFieldColor && getFieldColor[field.title] == null ? { color: '#000'} : { color : getFieldColor[field.title] }}>{field.value}</span>\n            { false && tooltip && <Tooltip head={field.title} text={field.desc} />}\n        </li>);\n    }\n}\n\nexport default class DatasetHead extends React.Component {\n\n    render() {\n        let {fields, onClick, id, deleteAction, headTitle, deletable, page, parent, getFieldColor} = this.props;\n        return (<div styleName=\"header\" onClick={onClick}>\n            <ul styleName=\"title-list\">\n                { fields.map((field, i) => <DatasetHeadField key={`index${i}field${id}`} field={field}\n                                                             getFieldColor={ getFieldColor }/> ) }\n\n                { !(page == 'customers' || page == 'analyse') && <li styleName='title-list__item action-col'>\n                    { deletable && <Button\n                        className={{\n                            local: 'title-list__action-button',\n                            global: 'flaticon-rubbish-bin fleft'\n                        }}\n                        onClick={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            this.props.togglePopup({\n                                msg: \"Are you sure you want to delete?\",\n                                onSave: () => {\n                                    this.props.togglePopup();\n                                    deleteAction({dataset_id: id, type: 'delete'})\n                                },\n                                onCancel: () => {\n                                    this.props.togglePopup();\n                                }\n                            });\n                        }}\n                    /> }\n                    <Button className={{\n                        local: 'title-list__action-button',\n                        global: 'flaticon-menu fleft'\n                    }}\n                            onClick={(e) => {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                console.log(\"menu action\");\n                            }}\n                    />\n                </li>}\n\n            </ul>\n        </div>)\n    }\n}\n","/Users/vikas/Documents/rzt-nbp/src/containers/TransactionListDetails/TransactionListDetails.js",["496","497","498","499","500","501","502","503"],"import * as React from 'react';\nimport CSSModules from 'react-css-modules';\n\nimport Button from './../../components/Button/Button';\n\n\nimport AnalyseSegments from '../AnalyseSegments/AnalyseSegments';\nimport AnalyseBarGraph from './../../containers/AnalyseBarGraph/AnalyseBarGraph';\nimport styles from './TransactionListDetails.css';\n\nconst match_key_with_name = (key)=>({name})=>name == key\n\nconst findGraph = (arr = [], fn)=>{\n    let item = arr.find(fn)\n    return (item && item.values)? item.values: [];\n}\n\nconst nFormatter = function (num, digits) {\n    var si = [\n        { value: 1E18, symbol: \"E\" },\n        { value: 1E15, symbol: \"P\" },\n        { value: 1E12, symbol: \"T\" },\n        { value: 1E9,  symbol: \"G\" },\n        { value: 1E6,  symbol: \"M\" },\n        { value: 1E3,  symbol: \"K\" }\n    ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/, i;\n    for (i = 0; i < si.length; i++) {\n        if (num >= si[i].value) {\n            return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n        }\n    }\n    return num.toFixed(digits).replace(rx, \"$1\");\n}\n\nconst toMillion = number => number / 1000000 + ' M';\n\nclass TransactionListDetails extends React.Component {\n    constructor(props, context) {\n        super(props, context)\n    }\n\n    render() {\n        let {fields, id, datasetId, gotoSegment, changeAction, records, showChildren, parent, locationQuery} = this.props;\n        // let overall_chart = findGraph(fields.graph, match_key_with_name(\"overall_chart\"));\n        let lifecycle_chart = findGraph(fields.graphs, match_key_with_name(\"lifecycle_chart\"));\n        let event_propensity_chart = findGraph(fields.graphs, match_key_with_name(\"event_propensity\"));\n        let segment_propensity_chart = findGraph(fields.graphs, match_key_with_name(\"segment_chart\"));\n        return (\n            <div styleName=\"analyse\" className=\"clearfix\">\n                <div styleName=\"analyse-main\">\n                    <div styleName=\"col-1\">\n\n                        <div className=\"clearfix\" styleName=\"seconday-graph-wrapper\">\n                            {/*<div styleName=\"secondary-graph\">*/}\n                                {/*<span styleName=\"analyse-col__title\">HAS LI</span>*/}\n                                {/*<div styleName=\"analyse-col__graph-container\">*/}\n                                    {/*<div styleName=\"analyse-col__graph-container__bg\"></div>*/}\n                                    {/*<BarGraph width={250} height={170} colorData={ [\"#73767C\", \"#C2C3C6\"] }*/}\n                                              {/*data={segment_propensity_chart}*/}\n                                              {/*gradientId={\"secondary\"}/>*/}\n                                {/*</div>*/}\n                            {/*</div>*/}\n                            <div styleName=\"secondary-graph\">\n                                <AnalyseBarGraph data={event_propensity_chart}/>\n                            </div>\n                            <div styleName=\"secondary-graph\">\n                                <span styleName=\"analyse-col__title\">QUARTILES</span>\n                                <div styleName=\"analyse-col__graph-container\">\n                                    <div styleName='quad-container'>\n                                        {fields.quartiles && fields.quartiles.map((avg, index)=><div key = {`Q${index + 1}`} styleName=\"quantile\">\n                                            <span styleName=\"quantile_title\">{`Q${index + 1}`}</span>\n                                            <span styleName=\"quantile_value\">{avg}%</span>\n                                        </div>)}\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div styleName=\"col-2\">\n                        {/*<span styleName=\"analyse-col__title\">INSIGHTS</span>*/}\n                        {/*<ul className=\"list-style-dot\" styleName=\"insights-list\">*/}\n                            {/*<li>Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Lorem</li>*/}\n                            {/*<li>Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Lorem ipsum</li>*/}\n                            {/*<li>Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Lorem ipsum </li>*/}\n                            {/*<li>Lorem Ipsum Lorem Ipsum Lorem Ipsum Lorem Lorem</li>*/}\n                        {/*</ul>*/}\n                        <div>\n                            <div styleName=\"actionsTextWrapper\">\n                                <span styleName=\"actionsText1\">{nFormatter(fields.customers, 1)}</span>\n                                <span styleName=\"actionsText2\">CUSTOMERS</span>\n                            </div>\n                            <Button className={{local: 'status-list__action-button'}}\n                                    text=\"VIEW CUSTOMER DETAILS\"\n                                    onClick={()=> {\n                                        gotoSegment(`/datasets/${datasetId}/customers?segmentId=${id}&segmentName=${fields.name}`)\n                                        {/*changeAction({type: 'train', id: id})*/}\n                                    }}/>\n                        </div>\n\n                    </div>\n                </div>\n                { parent && records && <div className={styles.innerDataset}>\n                    <AnalyseSegments records={ records }\n                                     gotoSegment={ gotoSegment }\n                                     parent={ false }\n                                     locationQuery={locationQuery}\n                                     showChildren={showChildren}\n                                     innerDataset={ true }/>\n                </div> }\n            </div>\n        )\n    }\n}\n\nexport default TransactionListDetails;\n","/Users/vikas/Documents/rzt-nbp/src/components/ProgressBar/ProgressBar.js",[],"/Users/vikas/Documents/rzt-nbp/src/containers/DatasetList/SegmentedBody.js",["504","505","506"],"import React from 'react';\nimport CSSModules from 'react-css-modules';\nimport styles from './DatasetList.css';\nimport Button from './../../components/Button/Button';\nimport {nFormatter} from './../../utils';\n\n// const nFormatter = function (num = 0, digits) {\n//     var si = [\n//         {value: 1E18, symbol: \"E\"},\n//         {value: 1E15, symbol: \"P\"},\n//         {value: 1E12, symbol: \"T\"},\n//         {value: 1E9, symbol: \"G\"},\n//         {value: 1E6, symbol: \"M\"},\n//         {value: 1E3, symbol: \"K\"}\n//     ], rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/, i;\n//     for (i = 0; i < si.length; i++) {\n//         if (num >= si[i].value) {\n//             return (num / si[i].value).toFixed(digits).replace(rx, \"$1\") + si[i].symbol;\n//         }\n//     }\n//     return (num || 0).toFixed(digits).replace(rx, \"$1\");\n// }\n\nconst SegmentedBody = ({fields, completedAt, duration, eta, charts, giniChart, rankingChart, type, gotoSegment, changeAction, id}) => (\n\n    <div styleName=\"status-wrapper\">\n        <ul styleName=\"status-list\">\n            <li styleName=\"status-list__item grid\">\n                <div styleName=\"status-list__text status-ready\">\n                    <span styleName=\"status-list__text__title\">{nFormatter(fields.segments, 1) || '0'}</span>\n                    <span styleName=\"status-list__text__sub-title\">SEGMENTS<br/>DERIVED</span>\n                </div>\n            </li>\n            <li styleName=\"status-list__item grid\">\n                <div\n                    styleName={`status-list__text ${fields.msg_id == 'SEGMENTS-MODIFIED' ? 'status-error' : 'status-ready'}`}>\n                    <span styleName=\"status-list__text__title\">{fields.gini_score || '--'}</span>\n                    <span styleName=\"status-list__text__sub-title\">GINI<br/>SCORE</span>\n                </div>\n            </li>\n            <li styleName=\"status-list__item grid\">\n                <div styleName=\"status-list__secondary-text\">\n                    <div className=\"status-list__secondary-text__wrapper\">\n                        <span styleName=\"status-list__secondary-text__title\">Completed at </span>\n                        <span styleName=\"status-list__secondary-text__value\">{ completedAt || '--'}</span>\n                        <span styleName=\"status-list__secondary-text__title\">Duration</span>\n                        <span styleName=\"status-list__secondary-text__value\">{duration || '--' }</span></div>\n                </div>\n            </li>\n            <li styleName=\"status-list__item action-col grid button-grp\">\n                <Button className={{local: 'status-list__action-button'}}\n                        onClick={() => {\n                            gotoSegment(`/datasets/${id}/segments`)\n                        }}>\n                    <span>VIEW SEGMENTS</span>\n                </Button>\n                {(type || '').toUpperCase() == \"TRAIN\" && fields.msg_id.toUpperCase() !== 'DEPLOYED_TO_PRODUCTION' &&\n                <Button className={{local: 'status-list__action-button'}}\n                        text=\"DEPLOY TO PRODUCTION\"\n                        onClick={() => {\n                            changeAction({type: 'deploy', dataset_id: id})\n                        }}/>}\n                {(type || '').toUpperCase() == \"FEED\" &&\n                <Button className={{local: 'status-list__action-button'}}\n                        text=\"RERUN MODEL\"\n                        onClick={() => {\n                            changeAction({type: 'rerun', dataset_id: id})\n                        }}/>}\n            </li>\n        </ul>\n    </div>\n)\n\nexport default CSSModules(SegmentedBody, styles, {allowMultiple: true});","/Users/vikas/Documents/rzt-nbp/src/containers/DatasetChart/DatasetChart.js",["507","508"],"import React, { Component } from \"react\";\nimport CSSModules from \"react-css-modules\";\nimport LineGraph from \"./../../components/LineGraph/LineGraph\";\n\nimport \"./../TransactionChart/TransactionCharts.css\";\nimport styles from \"./DatasetChart.css\";\n\n\nconst moment = require('moment');\n\nconst mmmmm_yyyy = (date) => moment(date).format(\"MMMM YYYY\");\n\nclass DatasetChart extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.records !== nextProps.records)\n            this.props.setFilters({\n                min: 0,\n                max: nextProps.records.length - 1\n            })\n    }\n\n    getLineChartData = (data) => ({\n        cartesian: {\n            stroke: \"#dddddd\",\n            vertical: false\n        },\n        graph: {\n            width: 600,\n            height: 220,\n            data: data.value.reduce((acc, {x, train, test, validate}, i, all) => {\n                let prev = {};\n                if (i > 0) {\n                    prev = acc[i - 1]\n                }\n                return acc.concat([{\n                    x,\n                    train: train != null ? train : prev.train,\n                    test: test != null ? test : prev.test,\n                    validate: validate != null ? validate : prev.validate\n                }])\n            }, [])\n        },\n        xAxisLabel: {text: data.xLabel, ix: 0, iy: 10, width: 600, height: 200, axisType: \"xAxis\"},\n        yAxisLabel: {text: data.yLabel, ix: 0, iy: -60, width: 600, height: 200, axisType: \"yAxis\"},\n        xAxis: {\n            dataKey: \"x\",\n            axisLine: false,\n            tickLine: false,\n            type: 'number'\n        },\n        yAxis: {\n            axisLine: false,\n            tickLine: false\n        },\n        legend: [\n            {text: 'Test', iconColor: \"#f5938e\"},\n            {text: 'Train', iconColor: \"#69da97\"},\n            {text: 'Validate', iconColor: \"#6eacf4\"}\n        ],\n\n        dataKeyList: [\n            {\n                name: \"Test\",\n                dataKey: \"test\",\n                stroke: \"#f5938e\",\n            }, {\n                name: \"Train\",\n                dataKey: \"train\",\n                stroke: \"#69da97\"\n            }, {\n                name: \"Validate\",\n                dataKey: \"validate\",\n                stroke: \"#6eacf4\"\n            }\n        ],\n        customTooltip: true,\n        legendStyle: {\n            position: \"absolute\",\n            height: \"auto\",\n            top: \"-20px\",\n            right: \"0\",\n            width: \"100%\"\n        }\n    });\n\n    render() {\n        let {data} = this.props;\n        let isRecordsEmpty = data.length < 1;\n\n        return (\n            <div className={styles.chartSection}>\n                <div className={styles.chartHeader}>\n                    <h4 className={styles.subSectionHeadtxt}>{data.name}</h4>\n                </div>\n                <div styleName=\"graph-container__bg\"></div>\n                <div className={styles.chartContent}>\n                    {\n                        !isRecordsEmpty &&\n                        <LineGraph type=\"dataset\"\n                                   lineData={this.getLineChartData(data)}\n                                   needsDot={false}\n                                   chartType=\"monotone\"\n                                   responsive={false}/>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\n\nDatasetChart.defaultProps = {\n    data: []\n}\n\nDatasetChart.propTypes = {\n    data: React.PropTypes.any\n}\n\nexport default CSSModules(DatasetChart, styles, {allowMultiple: true});\n","/Users/vikas/Documents/rzt-nbp/src/containers/DatasetBarGraph/DatasetBarGraph.js",[],"/Users/vikas/Documents/rzt-nbp/src/containers/AnalyseBarGraph/AnalyseBarGraph.js",[],"/Users/vikas/Documents/rzt-nbp/src/components/Tooltip/Tooltip.js",["509"],"import * as React from \"react\";\nimport CSSModules from 'react-css-modules';\nimport styles from './Tooltip.css';\nimport classNames from 'classnames';\n\nconst Tooltip = ({ head, text = \"Lorem Ipsum si simplye dummy text of the printig and typesetting\", position }) => (\n    <div styleName=\"tooltip\">\n        { head && <h3 styleName=\"head\">{ head }</h3> }\n        <p styleName=\"body\">{ text }</p>\n    </div>\n);\n\nexport default CSSModules( Tooltip, styles, { allowMultiple : true });\n","/Users/vikas/Documents/rzt-nbp/src/components/BarGraph/BarGraph.js",["510","511","512"],"import * as React from \"react\";\nimport _ from 'lodash';\n\nimport classNames from 'classnames';\nimport styles from './BarGraph.css';\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    CartesianAxis,\n    ResponsiveContainer,\n    Legend\n} from 'recharts';\nimport './../../containers/TransactionChart/TransactionCharts.css';\n\n\nconst CustomTooltip = ({ payload }) => {\n    let data = payload[0] && payload[0].payload;\n    return <div className={styles.customTooltip}>\n        {_.map(data, (value, key) => <p key={key}>\n            <span className={styles.tooltipKey}>{key}</span>\n            : <span\n            className={styles.tooltipValue}>{ `${Number(value)}${key.toLowerCase() == 'propensity' ? '%' : ''}` }</span>\n        </p>)}\n    </div>;\n};\n\nconst CustomAxisLabel = ({ axisType, x, y, ix, iy, width, height, text }) => {\n    const isVert = axisType === 'yAxis';\n    const rot = isVert ? -90 : 0;\n    const trans = isVert ? '(0,-8)' : '(0,3)';\n    const cx = isVert ? -height / 2 : ix + x + (width / 2);\n    const cy = isVert ? iy + y + (height / 2) - 39 : iy + y + (height / 2) + 10;\n    return (\n        <text x={cx || 0} y={cy || 0} transform={`rotate(${rot}) translate${trans}`} textAnchor=\"middle\">\n            {text}\n        </text>\n    );\n};\n\nconst CustomizedLegend = ({ legendList }) => (\n    <ul className={classNames(styles.legend, \"fright\")}>\n        {legendList && legendList.map((legend, index) => <li key={`legend-${index}`} className=\"clearfix\"><span\n            className={classNames(styles.legendIcon, \"fleft\")}\n            style={{ background: legend.iconColor }}></span><span\n            className={classNames(styles.legendText, \"fleft\")}>{legend.text}</span>\n        </li>)}\n    </ul>\n);\n\nconst BarGraph = ({ data }) => (\n    <BarChart {...data.graph}>\n        <defs>\n            {data.dataKeyList.map((item, index) => <linearGradient key={`gradient-${index}`} id={`grad-${index}`} x1=\"0\"\n                                                                   y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"0%\" stopColor={item.barGradient[0]}/>\n                <stop offset=\"100%\" stopColor={item.barGradient[1]}/>\n            </linearGradient>)}\n        </defs>\n        <Legend content={<CustomizedLegend legendList={data.legend}/>} wrapperStyle={data.legendStyle}/>\n        <XAxis { ...data.xAxis }\n               label={<CustomAxisLabel {...data.xAxisLabel}/>}/>\n        <YAxis {...data.yAxis}\n               label={<CustomAxisLabel {...data.yAxisLabel}/>}/>\n        <CartesianGrid {...data.cartesian}/>\n        <Tooltip content={<CustomTooltip />}/>\n        { data.dataKeyList && data.dataKeyList.map((item, index) => <Bar fill={`url(#grad-${index})`}\n                                                                         key={`bar-${index}`} {...item}/>) }\n    </BarChart>\n);\n\nexport default BarGraph;\n",{"ruleId":"513","severity":1,"message":"514","line":5,"column":10,"nodeType":"515","messageId":"516","endLine":5,"endColumn":22},{"ruleId":"517","replacedBy":"518"},{"ruleId":"519","replacedBy":"520"},{"ruleId":"521","severity":1,"message":"522","line":25,"column":28,"nodeType":"523","messageId":"524","endLine":25,"endColumn":30},{"ruleId":"513","severity":1,"message":"525","line":9,"column":3,"nodeType":"515","messageId":"516","endLine":9,"endColumn":29},{"ruleId":"513","severity":1,"message":"526","line":2,"column":5,"nodeType":"515","messageId":"516","endLine":2,"endColumn":32},{"ruleId":"513","severity":1,"message":"527","line":4,"column":5,"nodeType":"515","messageId":"516","endLine":4,"endColumn":31},{"ruleId":"513","severity":1,"message":"528","line":5,"column":5,"nodeType":"515","messageId":"516","endLine":5,"endColumn":32},{"ruleId":"513","severity":1,"message":"529","line":6,"column":5,"nodeType":"515","messageId":"516","endLine":6,"endColumn":26},{"ruleId":"513","severity":1,"message":"530","line":9,"column":5,"nodeType":"515","messageId":"516","endLine":9,"endColumn":23},{"ruleId":"531","severity":1,"message":"532","line":57,"column":5,"nodeType":"533","messageId":"534","endLine":59,"endColumn":6},{"ruleId":"521","severity":1,"message":"535","line":15,"column":21,"nodeType":"523","messageId":"524","endLine":15,"endColumn":23},{"ruleId":"536","severity":1,"message":"537","line":40,"column":43,"nodeType":"538","messageId":"539","endLine":40,"endColumn":71},{"ruleId":"513","severity":1,"message":"540","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":9},{"ruleId":"513","severity":1,"message":"541","line":9,"column":5,"nodeType":"515","messageId":"516","endLine":9,"endColumn":28},{"ruleId":"542","severity":1,"message":"543","line":15,"column":5,"nodeType":"544","messageId":"545","endLine":15,"endColumn":42,"fix":"546"},{"ruleId":"521","severity":1,"message":"522","line":25,"column":36,"nodeType":"523","messageId":"524","endLine":25,"endColumn":38},{"ruleId":"521","severity":1,"message":"522","line":71,"column":36,"nodeType":"523","messageId":"524","endLine":71,"endColumn":38},{"ruleId":"521","severity":1,"message":"522","line":90,"column":60,"nodeType":"523","messageId":"524","endLine":90,"endColumn":62},{"ruleId":"542","severity":1,"message":"543","line":35,"column":5,"nodeType":"544","messageId":"545","endLine":35,"endColumn":42,"fix":"547"},{"ruleId":"517","replacedBy":"548"},{"ruleId":"519","replacedBy":"549"},{"ruleId":"513","severity":1,"message":"550","line":4,"column":8,"nodeType":"515","messageId":"516","endLine":4,"endColumn":18},{"ruleId":"513","severity":1,"message":"551","line":14,"column":10,"nodeType":"515","messageId":"516","endLine":14,"endColumn":36},{"ruleId":"521","severity":1,"message":"535","line":54,"column":82,"nodeType":"523","messageId":"524","endLine":54,"endColumn":84},{"ruleId":"552","severity":1,"message":"553","line":82,"column":39,"nodeType":"554","messageId":"555","endLine":82,"endColumn":81},{"ruleId":"552","severity":1,"message":"553","line":140,"column":50,"nodeType":"554","messageId":"555","endLine":140,"endColumn":90},{"ruleId":"556","severity":1,"message":"557","line":68,"column":1,"nodeType":"558","endLine":68,"endColumn":31},{"ruleId":"531","severity":1,"message":"532","line":14,"column":5,"nodeType":"533","messageId":"534","endLine":16,"endColumn":6},{"ruleId":"513","severity":1,"message":"559","line":13,"column":3,"nodeType":"515","messageId":"516","endLine":13,"endColumn":24},{"ruleId":"513","severity":1,"message":"560","line":15,"column":3,"nodeType":"515","messageId":"516","endLine":15,"endColumn":19},{"ruleId":"556","severity":1,"message":"557","line":109,"column":1,"nodeType":"558","endLine":109,"endColumn":32},{"ruleId":"513","severity":1,"message":"550","line":6,"column":8,"nodeType":"515","messageId":"516","endLine":6,"endColumn":18},{"ruleId":"552","severity":1,"message":"553","line":49,"column":9,"nodeType":"554","messageId":"555","endLine":49,"endColumn":55},{"ruleId":"552","severity":1,"message":"553","line":50,"column":9,"nodeType":"554","messageId":"555","endLine":50,"endColumn":38},{"ruleId":"552","severity":1,"message":"553","line":51,"column":9,"nodeType":"554","messageId":"555","endLine":51,"endColumn":141},{"ruleId":"552","severity":1,"message":"553","line":52,"column":9,"nodeType":"554","messageId":"555","endLine":52,"endColumn":17},{"ruleId":"552","severity":1,"message":"553","line":53,"column":9,"nodeType":"554","messageId":"555","endLine":53,"endColumn":49},{"ruleId":"552","severity":1,"message":"553","line":54,"column":9,"nodeType":"554","messageId":"555","endLine":54,"endColumn":39},{"ruleId":"552","severity":1,"message":"553","line":55,"column":9,"nodeType":"554","messageId":"555","endLine":55,"endColumn":45},{"ruleId":"513","severity":1,"message":"561","line":57,"column":37,"nodeType":"515","messageId":"516","endLine":57,"endColumn":50},{"ruleId":"521","severity":1,"message":"535","line":60,"column":82,"nodeType":"523","messageId":"524","endLine":60,"endColumn":84},{"ruleId":"562","severity":1,"message":"563","line":135,"column":68,"nodeType":"564","messageId":"565","endLine":135,"endColumn":70},{"ruleId":"562","severity":1,"message":"563","line":135,"column":92,"nodeType":"564","messageId":"565","endLine":135,"endColumn":94},{"ruleId":"513","severity":1,"message":"566","line":8,"column":10,"nodeType":"515","messageId":"516","endLine":8,"endColumn":13},{"ruleId":"513","severity":1,"message":"567","line":10,"column":10,"nodeType":"515","messageId":"516","endLine":10,"endColumn":29},{"ruleId":"556","severity":1,"message":"557","line":27,"column":1,"nodeType":"558","endLine":27,"endColumn":33},{"ruleId":"556","severity":1,"message":"557","line":62,"column":1,"nodeType":"558","endLine":62,"endColumn":31},{"ruleId":"513","severity":1,"message":"568","line":13,"column":9,"nodeType":"515","messageId":"516","endLine":13,"endColumn":35},{"ruleId":"513","severity":1,"message":"569","line":13,"column":37,"nodeType":"515","messageId":"516","endLine":13,"endColumn":63},{"ruleId":"521","severity":1,"message":"535","line":42,"column":33,"nodeType":"523","messageId":"524","endLine":42,"endColumn":35},{"ruleId":"513","severity":1,"message":"526","line":4,"column":5,"nodeType":"515","messageId":"516","endLine":4,"endColumn":32},{"ruleId":"513","severity":1,"message":"530","line":8,"column":5,"nodeType":"515","messageId":"516","endLine":8,"endColumn":23},{"ruleId":"513","severity":1,"message":"550","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"513","severity":1,"message":"570","line":3,"column":8,"nodeType":"515","messageId":"516","endLine":3,"endColumn":14},{"ruleId":"513","severity":1,"message":"571","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"513","severity":1,"message":"550","line":3,"column":8,"nodeType":"515","messageId":"516","endLine":3,"endColumn":18},{"ruleId":"513","severity":1,"message":"570","line":4,"column":8,"nodeType":"515","messageId":"516","endLine":4,"endColumn":14},{"ruleId":"513","severity":1,"message":"550","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"521","severity":1,"message":"535","line":42,"column":50,"nodeType":"523","messageId":"524","endLine":42,"endColumn":52},{"ruleId":"521","severity":1,"message":"535","line":42,"column":144,"nodeType":"523","messageId":"524","endLine":42,"endColumn":146},{"ruleId":"521","severity":1,"message":"535","line":46,"column":59,"nodeType":"523","messageId":"524","endLine":46,"endColumn":61},{"ruleId":"513","severity":1,"message":"571","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"513","severity":1,"message":"572","line":14,"column":7,"nodeType":"515","messageId":"516","endLine":14,"endColumn":17},{"ruleId":"531","severity":1,"message":"532","line":17,"column":5,"nodeType":"533","messageId":"534","endLine":19,"endColumn":6},{"ruleId":"513","severity":1,"message":"573","line":89,"column":14,"nodeType":"515","messageId":"516","endLine":89,"endColumn":17},{"ruleId":"513","severity":1,"message":"574","line":89,"column":19,"nodeType":"515","messageId":"516","endLine":89,"endColumn":22},{"ruleId":"513","severity":1,"message":"575","line":7,"column":7,"nodeType":"515","messageId":"516","endLine":7,"endColumn":13},{"ruleId":"513","severity":1,"message":"576","line":11,"column":7,"nodeType":"515","messageId":"516","endLine":11,"endColumn":16},{"ruleId":"513","severity":1,"message":"577","line":12,"column":7,"nodeType":"515","messageId":"516","endLine":12,"endColumn":13},{"ruleId":"513","severity":1,"message":"578","line":48,"column":36,"nodeType":"515","messageId":"516","endLine":48,"endColumn":40},{"ruleId":"521","severity":1,"message":"535","line":56,"column":79,"nodeType":"523","messageId":"524","endLine":56,"endColumn":81},{"ruleId":"513","severity":1,"message":"579","line":38,"column":30,"nodeType":"515","messageId":"516","endLine":38,"endColumn":37},{"ruleId":"513","severity":1,"message":"550","line":6,"column":8,"nodeType":"515","messageId":"516","endLine":6,"endColumn":18},{"ruleId":"513","severity":1,"message":"570","line":7,"column":8,"nodeType":"515","messageId":"516","endLine":7,"endColumn":14},{"ruleId":"513","severity":1,"message":"580","line":23,"column":37,"nodeType":"515","messageId":"516","endLine":23,"endColumn":55},{"ruleId":"581","severity":1,"message":"582","line":27,"column":17,"nodeType":"583","endLine":27,"endColumn":63},{"ruleId":"521","severity":1,"message":"535","line":30,"column":29,"nodeType":"523","messageId":"524","endLine":30,"endColumn":31},{"ruleId":"521","severity":1,"message":"535","line":34,"column":31,"nodeType":"523","messageId":"524","endLine":34,"endColumn":33},{"ruleId":"521","severity":1,"message":"535","line":34,"column":59,"nodeType":"523","messageId":"524","endLine":34,"endColumn":61},{"ruleId":"521","severity":1,"message":"535","line":36,"column":45,"nodeType":"523","messageId":"524","endLine":36,"endColumn":47},{"ruleId":"521","severity":1,"message":"535","line":38,"column":37,"nodeType":"523","messageId":"524","endLine":38,"endColumn":39},{"ruleId":"521","severity":1,"message":"535","line":41,"column":31,"nodeType":"523","messageId":"524","endLine":41,"endColumn":33},{"ruleId":"552","severity":1,"message":"553","line":45,"column":66,"nodeType":"554","messageId":"555","endLine":45,"endColumn":128},{"ruleId":"521","severity":1,"message":"535","line":48,"column":30,"nodeType":"523","messageId":"524","endLine":48,"endColumn":32},{"ruleId":"513","severity":1,"message":"584","line":9,"column":8,"nodeType":"515","messageId":"516","endLine":9,"endColumn":20},{"ruleId":"513","severity":1,"message":"585","line":40,"column":14,"nodeType":"515","messageId":"516","endLine":40,"endColumn":32},{"ruleId":"513","severity":1,"message":"586","line":41,"column":14,"nodeType":"515","messageId":"516","endLine":41,"endColumn":30},{"ruleId":"513","severity":1,"message":"587","line":41,"column":32,"nodeType":"515","messageId":"516","endLine":41,"endColumn":48},{"ruleId":"513","severity":1,"message":"588","line":41,"column":50,"nodeType":"515","messageId":"516","endLine":41,"endColumn":67},{"ruleId":"513","severity":1,"message":"589","line":41,"column":69,"nodeType":"515","messageId":"516","endLine":41,"endColumn":85},{"ruleId":"513","severity":1,"message":"590","line":41,"column":87,"nodeType":"515","messageId":"516","endLine":41,"endColumn":104},{"ruleId":"513","severity":1,"message":"591","line":41,"column":106,"nodeType":"515","messageId":"516","endLine":41,"endColumn":120},{"ruleId":"513","severity":1,"message":"592","line":42,"column":13,"nodeType":"515","messageId":"516","endLine":42,"endColumn":21},{"ruleId":"581","severity":1,"message":"582","line":46,"column":21,"nodeType":"583","endLine":46,"endColumn":67},{"ruleId":"513","severity":1,"message":"593","line":9,"column":7,"nodeType":"515","messageId":"516","endLine":9,"endColumn":15},{"ruleId":"513","severity":1,"message":"550","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"521","severity":1,"message":"535","line":79,"column":102,"nodeType":"523","messageId":"524","endLine":79,"endColumn":104},{"ruleId":"521","severity":1,"message":"535","line":86,"column":94,"nodeType":"523","messageId":"524","endLine":86,"endColumn":96},{"ruleId":"542","severity":1,"message":"594","line":86,"column":127,"nodeType":"544","messageId":"545","endLine":86,"endColumn":209,"fix":"595"},{"ruleId":"521","severity":1,"message":"535","line":13,"column":99,"nodeType":"523","messageId":"524","endLine":13,"endColumn":101},{"ruleId":"521","severity":1,"message":"535","line":81,"column":76,"nodeType":"523","messageId":"524","endLine":81,"endColumn":78},{"ruleId":"521","severity":1,"message":"535","line":54,"column":44,"nodeType":"523","messageId":"524","endLine":54,"endColumn":46},{"ruleId":"521","severity":1,"message":"535","line":68,"column":33,"nodeType":"523","messageId":"524","endLine":68,"endColumn":35},{"ruleId":"521","severity":1,"message":"535","line":77,"column":28,"nodeType":"523","messageId":"524","endLine":77,"endColumn":30},{"ruleId":"521","severity":1,"message":"535","line":88,"column":28,"nodeType":"523","messageId":"524","endLine":88,"endColumn":30},{"ruleId":"521","severity":1,"message":"535","line":96,"column":33,"nodeType":"523","messageId":"524","endLine":96,"endColumn":35},{"ruleId":"513","severity":1,"message":"550","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"531","severity":1,"message":"532","line":33,"column":5,"nodeType":"533","messageId":"534","endLine":35,"endColumn":6},{"ruleId":"521","severity":1,"message":"535","line":52,"column":29,"nodeType":"523","messageId":"524","endLine":52,"endColumn":31},{"ruleId":"513","severity":1,"message":"550","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"531","severity":1,"message":"532","line":45,"column":5,"nodeType":"533","messageId":"534","endLine":47,"endColumn":6},{"ruleId":"521","severity":1,"message":"535","line":56,"column":57,"nodeType":"523","messageId":"524","endLine":56,"endColumn":59},{"ruleId":"521","severity":1,"message":"535","line":57,"column":60,"nodeType":"523","messageId":"524","endLine":57,"endColumn":62},{"ruleId":"521","severity":1,"message":"535","line":65,"column":28,"nodeType":"523","messageId":"524","endLine":65,"endColumn":30},{"ruleId":"521","severity":1,"message":"535","line":74,"column":30,"nodeType":"523","messageId":"524","endLine":74,"endColumn":32},{"ruleId":"521","severity":1,"message":"535","line":84,"column":30,"nodeType":"523","messageId":"524","endLine":84,"endColumn":32},{"ruleId":"521","severity":1,"message":"535","line":94,"column":30,"nodeType":"523","messageId":"524","endLine":94,"endColumn":32},{"ruleId":"521","severity":1,"message":"535","line":94,"column":60,"nodeType":"523","messageId":"524","endLine":94,"endColumn":62},{"ruleId":"521","severity":1,"message":"535","line":104,"column":38,"nodeType":"523","messageId":"524","endLine":104,"endColumn":40},{"ruleId":"521","severity":1,"message":"535","line":121,"column":30,"nodeType":"523","messageId":"524","endLine":121,"endColumn":32},{"ruleId":"521","severity":1,"message":"535","line":121,"column":62,"nodeType":"523","messageId":"524","endLine":121,"endColumn":64},{"ruleId":"521","severity":1,"message":"535","line":121,"column":95,"nodeType":"523","messageId":"524","endLine":121,"endColumn":97},{"ruleId":"521","severity":1,"message":"535","line":121,"column":126,"nodeType":"523","messageId":"524","endLine":121,"endColumn":128},{"ruleId":"521","severity":1,"message":"535","line":151,"column":30,"nodeType":"523","messageId":"524","endLine":151,"endColumn":32},{"ruleId":"521","severity":1,"message":"535","line":151,"column":62,"nodeType":"523","messageId":"524","endLine":151,"endColumn":64},{"ruleId":"521","severity":1,"message":"535","line":156,"column":30,"nodeType":"523","messageId":"524","endLine":156,"endColumn":32},{"ruleId":"521","severity":1,"message":"535","line":156,"column":60,"nodeType":"523","messageId":"524","endLine":156,"endColumn":62},{"ruleId":"521","severity":1,"message":"535","line":159,"column":71,"nodeType":"523","messageId":"524","endLine":159,"endColumn":73},{"ruleId":"521","severity":1,"message":"535","line":169,"column":71,"nodeType":"523","messageId":"524","endLine":169,"endColumn":73},{"ruleId":"521","severity":1,"message":"535","line":176,"column":71,"nodeType":"523","messageId":"524","endLine":176,"endColumn":73},{"ruleId":"531","severity":1,"message":"532","line":219,"column":5,"nodeType":"533","messageId":"534","endLine":221,"endColumn":6},{"ruleId":"513","severity":1,"message":"550","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"513","severity":1,"message":"596","line":4,"column":9,"nodeType":"515","messageId":"516","endLine":4,"endColumn":13},{"ruleId":"513","severity":1,"message":"597","line":5,"column":9,"nodeType":"515","messageId":"516","endLine":5,"endColumn":16},{"ruleId":"513","severity":1,"message":"570","line":6,"column":8,"nodeType":"515","messageId":"516","endLine":6,"endColumn":14},{"ruleId":"513","severity":1,"message":"598","line":7,"column":8,"nodeType":"515","messageId":"516","endLine":7,"endColumn":18},{"ruleId":"513","severity":1,"message":"599","line":8,"column":9,"nodeType":"515","messageId":"516","endLine":8,"endColumn":22},{"ruleId":"513","severity":1,"message":"600","line":9,"column":8,"nodeType":"515","messageId":"516","endLine":9,"endColumn":14},{"ruleId":"513","severity":1,"message":"601","line":11,"column":9,"nodeType":"515","messageId":"516","endLine":11,"endColumn":17},{"ruleId":"513","severity":1,"message":"602","line":14,"column":9,"nodeType":"515","messageId":"516","endLine":14,"endColumn":29},{"ruleId":"513","severity":1,"message":"575","line":15,"column":7,"nodeType":"515","messageId":"516","endLine":15,"endColumn":13},{"ruleId":"521","severity":1,"message":"535","line":79,"column":34,"nodeType":"523","messageId":"524","endLine":79,"endColumn":36},{"ruleId":"521","severity":1,"message":"522","line":139,"column":37,"nodeType":"523","messageId":"524","endLine":139,"endColumn":39},{"ruleId":"521","severity":1,"message":"535","line":143,"column":56,"nodeType":"523","messageId":"524","endLine":143,"endColumn":58},{"ruleId":"513","severity":1,"message":"603","line":163,"column":7,"nodeType":"515","messageId":"516","endLine":163,"endColumn":17},{"ruleId":"513","severity":1,"message":"550","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"513","severity":1,"message":"570","line":3,"column":8,"nodeType":"515","messageId":"516","endLine":3,"endColumn":14},{"ruleId":"513","severity":1,"message":"601","line":5,"column":9,"nodeType":"515","messageId":"516","endLine":5,"endColumn":17},{"ruleId":"513","severity":1,"message":"604","line":39,"column":49,"nodeType":"515","messageId":"516","endLine":39,"endColumn":58},{"ruleId":"513","severity":1,"message":"605","line":39,"column":77,"nodeType":"515","messageId":"516","endLine":39,"endColumn":83},{"ruleId":"521","severity":1,"message":"535","line":45,"column":26,"nodeType":"523","messageId":"524","endLine":45,"endColumn":28},{"ruleId":"521","severity":1,"message":"535","line":45,"column":49,"nodeType":"523","messageId":"524","endLine":45,"endColumn":51},{"ruleId":"513","severity":1,"message":"550","line":2,"column":8,"nodeType":"515","messageId":"516","endLine":2,"endColumn":18},{"ruleId":"521","severity":1,"message":"535","line":11,"column":51,"nodeType":"523","messageId":"524","endLine":11,"endColumn":53},{"ruleId":"513","severity":1,"message":"606","line":35,"column":7,"nodeType":"515","messageId":"516","endLine":35,"endColumn":16},{"ruleId":"531","severity":1,"message":"532","line":38,"column":5,"nodeType":"533","messageId":"534","endLine":40,"endColumn":6},{"ruleId":"513","severity":1,"message":"607","line":43,"column":50,"nodeType":"515","messageId":"516","endLine":43,"endColumn":62},{"ruleId":"513","severity":1,"message":"608","line":45,"column":13,"nodeType":"515","messageId":"516","endLine":45,"endColumn":28},{"ruleId":"513","severity":1,"message":"609","line":47,"column":13,"nodeType":"515","messageId":"516","endLine":47,"endColumn":37},{"ruleId":"552","severity":1,"message":"553","line":96,"column":41,"nodeType":"554","messageId":"555","endLine":96,"endColumn":84},{"ruleId":"521","severity":1,"message":"535","line":36,"column":67,"nodeType":"523","messageId":"524","endLine":36,"endColumn":69},{"ruleId":"521","severity":1,"message":"535","line":57,"column":45,"nodeType":"523","messageId":"524","endLine":57,"endColumn":47},{"ruleId":"521","severity":1,"message":"535","line":63,"column":45,"nodeType":"523","messageId":"524","endLine":63,"endColumn":47},{"ruleId":"513","severity":1,"message":"572","line":11,"column":7,"nodeType":"515","messageId":"516","endLine":11,"endColumn":17},{"ruleId":"531","severity":1,"message":"532","line":14,"column":5,"nodeType":"533","messageId":"534","endLine":16,"endColumn":6},{"ruleId":"513","severity":1,"message":"571","line":4,"column":8,"nodeType":"515","messageId":"516","endLine":4,"endColumn":18},{"ruleId":"513","severity":1,"message":"610","line":13,"column":5,"nodeType":"515","messageId":"516","endLine":13,"endColumn":18},{"ruleId":"513","severity":1,"message":"611","line":14,"column":5,"nodeType":"515","messageId":"516","endLine":14,"endColumn":24},{"ruleId":"521","severity":1,"message":"535","line":26,"column":84,"nodeType":"523","messageId":"524","endLine":26,"endColumn":86},"no-unused-vars","'loadToDoList' is defined but never used.","Identifier","unusedVar","no-native-reassign",["612"],"no-negated-in-lhs",["613"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'ACTION_DELETE_DATASET_SAGA' is defined but never used.","'LOAD_CUSTOMERS_PROFILE_DATA' is defined but never used.","'ACTION_LOAD_CUSTOMERS_SAGA' is defined but never used.","'ACTION_LEAVE_CUSTOMERS_PAGE' is defined but never used.","'ACTION_LOAD_CUSTOMERS' is defined but never used.","'ACTION_HIDE_LOADER' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","Expected '===' and instead saw '=='.","no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","'_' is defined but never used.","'ACTION_DATASET_LISTENER' is defined but never used.","no-useless-computed-key","Unnecessarily computed property [\"action\"] found.","Property","unnecessarilyComputedProperty",{"range":"614","text":"615"},{"range":"616","text":"615"},["612"],["613"],"'CSSModules' is defined but never used.","'actionSagaLoadSegmentsList' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","import/no-anonymous-default-export","Assign array to a variable before exporting as module default","ExportDefaultDeclaration","'URL_DATASETS_PROGRESS' is defined but never used.","'URL_DATASETS_NEW' is defined but never used.","'loadCustomers' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","'get' is defined but never used.","'actionLoadCustomers' is defined but never used.","'actionLoadTransactionsSaga' is defined but never used.","'actionBothLoadTransactions' is defined but never used.","'styles' is defined but never used.","'classNames' is defined but never used.","'mmmmm_yyyy' is assigned a value but never used.","'min' is assigned a value but never used.","'max' is assigned a value but never used.","'moment' is assigned a value but never used.","'beginning' is assigned a value but never used.","'ending' is assigned a value but never used.","'type' is assigned a value but never used.","'colName' is assigned a value but never used.","'prepareForDownload' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'CustomerList' is defined but never used.","'customerListToggle' is assigned a value but never used.","'customerListData' is assigned a value but never used.","'customerListMeta' is assigned a value but never used.","'loadCustomersData' is assigned a value but never used.","'loadCustomerData' is assigned a value but never used.","'currentCustomerId' is assigned a value but never used.","'totalCustomers' is assigned a value but never used.","'pagesize' is assigned a value but never used.","'TickMark' is assigned a value but never used.","Unnecessarily computed property ['hide'] found.",{"range":"617","text":"618"},"'Link' is defined but never used.","'connect' is defined but never used.","'classnames' is defined but never used.","'dateformatter' is defined but never used.","'Button' is defined but never used.","'TweenMax' is defined but never used.","'actionDeleteDatasets' is defined but never used.","'dispatcher' is assigned a value but never used.","'headTitle' is assigned a value but never used.","'parent' is assigned a value but never used.","'toMillion' is assigned a value but never used.","'changeAction' is assigned a value but never used.","'lifecycle_chart' is assigned a value but never used.","'segment_propensity_chart' is assigned a value but never used.","'CartesianAxis' is defined but never used.","'ResponsiveContainer' is defined but never used.","no-global-assign","no-unsafe-negation",[362,372],"\"action\"",[734,744],[3704,3712],"'hide'"]